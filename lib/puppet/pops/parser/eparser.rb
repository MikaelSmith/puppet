#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 940)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'67,79,304,-149,65,73,304,74,89,90,91,73,116,74,-293,307,379,179,154',
'-290,85,292,352,305,21,20,118,305,121,-295,131,54,117,57,128,69,12,342',
'63,46,49,157,56,47,10,11,-149,88,66,19,180,293,48,120,307,17,18,-293',
'92,94,93,95,-290,84,131,353,130,270,128,55,127,403,-295,45,80,97,82',
'83,129,-190,-190,64,51,70,71,58,404,96,62,60,61,67,79,72,116,65,73,476',
'74,72,130,131,-281,116,127,128,477,304,118,271,121,160,129,154,117,21',
'20,118,330,121,307,331,54,117,57,154,69,136,305,63,46,49,161,56,47,120',
'157,130,170,66,19,127,297,48,120,-281,17,18,157,129,98,99,131,529,84',
'131,128,97,459,128,55,472,171,471,45,80,97,82,83,426,184,74,64,51,70',
'71,58,304,200,62,60,61,67,79,72,116,65,73,130,74,307,130,127,202,472',
'127,471,460,305,118,129,121,459,129,131,117,21,20,128,133,134,283,282',
'54,-280,57,205,69,136,116,63,46,49,88,56,47,120,272,181,79,66,19,182',
'118,48,121,96,17,18,117,130,98,99,131,127,84,96,128,97,283,282,55,129',
'-190,-190,45,80,-280,82,83,120,283,282,64,51,70,71,58,-194,-194,62,60',
'61,67,79,72,285,65,73,130,74,-192,-192,127,131,286,453,-235,128,287',
'131,129,-191,-191,128,131,160,21,20,128,333,332,124,171,54,290,57,291',
'69,12,295,63,46,49,321,56,47,10,11,322,130,66,19,328,127,48,130,-236',
'17,18,127,130,129,283,282,127,84,131,129,133,134,128,55,129,131,328',
'45,80,128,82,83,283,282,88,149,146,70,71,147,153,152,148,60,61,67,79',
'72,116,65,73,96,74,96,130,131,344,345,127,128,96,130,118,96,121,127',
'129,350,117,21,20,171,358,129,376,377,54,384,57,379,69,136,116,63,46',
'49,304,56,47,120,383,130,388,66,19,127,118,48,121,307,17,18,117,129',
'98,99,131,305,84,131,128,97,390,128,55,394,396,307,45,80,399,82,83,120',
'400,304,64,51,70,71,58,413,414,62,60,61,67,79,72,415,65,73,130,74,430',
'130,127,416,116,127,287,418,421,295,129,427,429,129,399,-235,21,20,118',
'434,121,436,443,54,117,57,444,69,12,386,63,46,49,350,56,47,10,11,304',
'351,66,19,447,450,48,120,399,17,18,399,160,307,461,462,465,84,466,469',
'473,305,475,55,486,487,489,45,80,491,82,83,350,495,497,149,146,70,71',
'147,153,152,148,60,61,67,79,72,350,65,73,116,74,500,501,350,505,509',
'475,511,513,514,515,350,517,118,518,121,358,21,20,117,523,524,525,526',
'54,527,57,528,69,12,537,63,46,49,539,56,47,10,11,540,120,66,19,541,543',
'48,544,545,17,18,546,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71',
'58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57',
',69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,',
'45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,',
',,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48',
',,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61',
'67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46',
'49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,',
',64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20',
',,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84',
',,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73',
',74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,',
',62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69',
'136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80',
',82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,',
',,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18',
',,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79',
'72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56',
'47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51',
'70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,',
',,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,',
'48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60',
'61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63',
'46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82',
'83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,,,,,,',
',,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48',
',,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61',
'67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46',
'49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,',
',64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20',
',,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84',
',,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73',
',74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,',
',62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69',
'136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80',
',82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,',
',,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18',
',,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79',
'72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56',
'47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51',
'70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,',
',,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,',
'48,,,17,18,,,,,,,84,,,,,,55,,,265,45,80,,82,83,,,,64,51,70,71,58,,,62',
'60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,',
'63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80',
',82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,464',
',,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,',
',62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69',
'136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80',
',82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,',
',,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18',
',,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79',
'72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56',
'47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149',
'146,70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,',
'21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,',
',,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72',
',65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47',
',,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70',
'71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,',
'57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,',
'55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74',
'478,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,',
',62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69',
'12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45',
'80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,',
',,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48',
',,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61',
'67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46',
'49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83',
',,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21',
'20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,',
',84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65',
'73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10',
'11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149,146',
'70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20',
',,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84',
',,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73',
',74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11',
',,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71',
'58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,145,,,,,54,',
'57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,',
'55,,,,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,',
'65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47',
'10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51',
'70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,',
',55,,,,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72',
',65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47',
'10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51',
'70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,',
',55,,,,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72',
',65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47',
',,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70',
'71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,',
'57,,69,12,,63,46,49,86,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,',
',,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74',
',,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19',
',,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62',
'60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136',
',63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82',
'83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,',
'21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,',
',,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72',
',65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47',
',,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70',
'71,58,,,62,60,61,67,79,72,,65,73,,74,520,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,',
',55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74',
',,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,',
',62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,309,,,,,54,,57,',
'69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,',
',,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65,73',
',74,531,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10',
'11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70',
'71,58,,,62,60,61,67,79,72,,65,73,,74,533,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,',
',55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74',
',,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,',
',62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69',
'12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45',
'80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,',
',,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48',
',,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149,146,70,71,147,153,152',
'148,60,61,67,79,72,,65,73,,74,319,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,',
'69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,',
',,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,',
',,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48',
',,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61',
'67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46',
'49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83',
'81,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21',
'20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,',
',,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72',
',65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47',
'10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51',
'70,71,58,,,62,60,61,67,79,72,,65,73,,74,193,,,,,,,,,,,,,,,,21,20,,,',
',,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84',
',,,,,55,,,,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79',
'72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56',
'47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64',
'51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,351,,,,,,,,,,,,,,21,20',
',,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84',
',,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73',
',74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,',
',62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69',
'136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80',
',82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,',
',,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18',
',,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79',
'72,,65,73,186,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49',
',56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,',
',,149,146,70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,,,,,,,,,,',
',,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17',
'18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67',
'79,72,,65,73,191,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46',
'49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83',
',,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,193,,,,,',
',,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,',
'48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149,146,70,71,147,153',
'152,148,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57',
',69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,204,,',
',,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,',
',48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62',
'60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,',
'63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80',
',82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,,',
',,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,',
',48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62',
'60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,',
'63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80',
',82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,,',
',,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19',
',,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149,146,70,71,147,153',
'152,148,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57',
',69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,',
',,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19',
',,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62',
'60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136',
',63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82',
'83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,',
'21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18',
',,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79',
'72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56',
'47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64',
'51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,',
',,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84',
',,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73',
',74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11',
',,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71',
'58,,,62,60,61,67,79,72,,65,73,,74,406,,,,,,,,,,,,,,,,21,20,,,,,,54,',
'57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,',
'55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74',
'408,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,',
',66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71',
'58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57',
',69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,',
'45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,',
',,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,',
'48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60',
'61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63',
'46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82',
'83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,',
'21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18',
',,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79',
'72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56',
'47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64',
'51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,',
',,222,237,228,238,69,230,240,232,46,220,,224,218,,,,,66,19,241,236,219',
',,17,217,,,,,,,84,,,,,239,223,,,,45,80,,82,83,,,,233,221,234,235,229',
'243,242,231,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,',
',,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,',
'48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,116,,62',
'60,61,,,72,,,,,112,107,118,,121,116,115,,117,,108,110,109,111,,,,,107',
'118,,121,,,,117,,108,,120,,,,114,113,,,100,101,103,102,105,106,,98,99',
'120,,,,116,97,,,100,101,103,102,105,106,,98,99,107,118,,121,,97,,117',
',108,,,,,,104,,,,,,,,,,181,79,,120,182,,,104,116,,,100,101,103,102,105',
'106,,98,99,112,107,118,,121,97,115,,117,,108,110,109,111,,,,,,,179,',
',176,,,,,,120,,,104,114,113,,116,100,101,103,102,105,106,84,98,99,,',
',107,118,97,121,180,80,,117,,108,,,,,,,,,,,,,,,,,,,120,104,,,,116,,312',
'100,101,103,102,105,106,,98,99,112,107,118,,121,97,115,,117,,108,110',
'109,111,,,,,,,,,,,,,,,,120,,,104,114,113,,116,100,101,103,102,105,106',
',98,99,,,,107,118,97,121,,,,117,,108,,,,,,,,,,,,,,,,,,,120,104,,,,116',
',311,100,101,103,102,105,106,,98,99,112,107,118,,121,97,115,,117,,108',
'110,109,111,,,,,,,,,,,,,,,,120,,,104,114,113,,,100,101,103,102,105,106',
',98,99,116,,310,,,97,,,,,,,112,107,118,,121,,115,,117,,108,110,109,111',
',,,,,,104,,,,,,,,,120,,,,114,113,,116,100,101,103,102,105,106,,98,99',
',,112,107,118,97,121,,115,,117,,108,110,109,111,,,,,,,,,,,,,,,,120,104',
',,,116,,,100,101,103,102,105,106,,98,99,112,107,118,,121,97,115,,117',
',108,110,109,111,,,,,,,,,,,,,,,,120,,,104,,113,,,100,101,103,102,105',
'106,116,98,99,,,354,,,97,,,,112,107,118,,121,116,115,,117,,108,110,109',
'111,,,,,,118,,121,,104,,117,,,,120,,,,114,113,,,100,101,103,102,105',
'106,,98,99,120,,,116,,97,,,100,101,103,102,105,106,,98,99,118,,121,116',
',97,117,,,,,,,,,104,,118,,121,,181,79,117,,182,,120,,,,,104,,,100,101',
'103,102,105,106,,98,99,120,,,,,97,,,100,101,103,102,,116,,98,99,179',
',,176,,97,,,112,107,118,,121,,115,104,117,,108,110,109,111,,84,,,,,',
',,,104,180,80,,,120,,,,114,113,,,100,101,103,102,105,106,,98,99,116',
'-66,,,,97,-66,,,,,,112,107,118,,121,116,115,,117,,108,110,109,111,,',
',,,118,104,121,,181,79,117,,182,,120,,,,114,113,,,100,101,103,102,105',
'106,,98,99,120,,,,,97,,,100,101,103,102,,116,,98,99,179,,,176,,97,,',
'112,107,118,,121,,115,104,117,,108,110,109,111,,84,116,,181,79,,,182',
',104,180,80,,,120,118,,121,114,113,,117,100,101,103,102,105,106,,98',
'99,,,,,,97,,,,,,120,179,,116,176,344,345,,,,103,102,,,,98,99,118,,121',
',104,97,117,84,,,,,,,,,,180,80,,,,,,,,,120,,,,,104,,,,,103,102,116,',
',98,99,,,,,,97,,112,107,118,348,121,,115,,117,,108,110,109,111,,,,,',
',,,,,,104,,,,120,,,,114,113,,116,100,101,103,102,105,106,,98,99,,,112',
'107,118,97,121,,115,,117,,108,110,109,111,,,,,,,,,,,,,,,,120,104,,,114',
'113,,116,100,101,103,102,105,106,,98,99,,,112,107,118,97,121,,115,,117',
',108,110,109,111,,,,,,,,,,,,,,,,120,104,,,114,113,,116,100,101,103,102',
'105,106,,98,99,,,112,107,118,97,121,,115,,117,,108,110,109,111,,,,,',
',,,,,,,,,,120,104,,,114,113,,,100,101,103,102,105,106,116,98,99,,,,',
',97,,,,112,107,118,380,121,,115,,117,,108,110,109,111,,,,,,,,,,104,',
',,,,120,,,,114,113,,116,100,101,103,102,105,106,,98,99,,,112,107,118',
'97,121,,115,,117,,108,110,109,111,,,,,,,,,,,,,,,,120,104,,,114,113,',
'116,100,101,103,102,105,106,,98,99,,,112,107,118,97,121,,115,,117,,108',
'110,109,111,,,,,,,,,,,,,,,,120,104,,,114,113,,116,100,101,103,102,105',
'106,,98,99,,,112,107,118,97,121,,115,,117,,108,110,109,111,,,,,,,,,',
',,,,,,120,104,,,114,113,,,100,101,103,102,105,106,,98,99,,366,237,365',
'238,97,363,240,367,,360,,362,364,,,,,,,241,236,368,,,,361,,,,,,104,',
',,,,239,369,,,,,,,,,,,,372,370,373,371,374,243,242,375,366,237,365,238',
',363,240,367,,360,,362,364,,,,,,,241,236,368,,,,361,,,,,,,,,,,,239,369',
',,,,,,,,,,,372,370,373,371,374,243,242,375,366,237,365,238,,363,240',
'367,,360,,362,364,,,,,,,241,236,368,,,,361,,,,,,,,,,,,239,369,,,,,,',
',,,,,372,370,373,371,374,243,242,375,366,237,365,238,,363,240,367,,360',
',362,364,,,,,,,241,236,368,,,,361,,,,,,,,,,,,239,369,,,,,,,,,,,,372',
'370,373,371,374,243,242,375,366,237,365,238,,363,240,367,,360,,362,364',
',,,,,,241,236,368,,,,361,,,,,,,,,,,,239,369,,,,,,,,,,,,372,370,373,371',
'374,243,242,375,366,237,365,238,,363,240,367,,360,,362,364,,,,,,,241',
'236,368,,,,361,,,,,,,,,,,,239,369,,,,,,,,,,,,372,370,373,371,374,243',
'242,375' ]
        racc_action_table = arr = ::Array.new(10734, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'414,414,202,220,414,414,306,414,7,7,7,184,246,184,235,202,542,322,51',
'219,1,157,227,202,414,414,246,306,246,234,228,414,246,414,228,414,414',
'202,414,414,414,51,414,414,414,414,220,5,414,414,322,157,414,246,184',
'414,414,235,7,7,7,7,219,414,168,227,228,118,168,414,228,308,234,414',
'414,246,414,414,228,220,220,414,414,414,414,414,308,8,414,414,414,99',
'99,414,250,99,99,410,99,184,168,229,218,245,168,229,410,160,250,118',
'250,52,168,146,250,99,99,245,192,245,160,192,99,245,99,221,99,99,160',
'99,99,99,53,99,99,250,146,229,61,99,99,229,160,99,245,218,99,99,221',
'229,250,250,57,506,99,147,57,250,506,147,99,469,62,469,99,99,245,99',
'99,324,68,324,99,99,99,99,99,399,80,99,99,99,100,100,99,251,100,100',
'57,100,399,147,57,81,406,147,406,392,399,251,57,251,392,147,230,251',
'100,100,230,16,16,166,166,100,230,100,85,100,100,135,100,100,100,87',
'100,100,251,119,200,200,100,100,200,135,100,135,122,100,100,135,230',
'251,251,383,230,100,123,383,251,125,125,100,230,49,49,100,100,230,100',
'100,135,167,167,100,100,100,100,100,67,67,100,100,100,328,328,100,139',
'328,328,383,328,66,66,383,149,140,383,141,149,144,64,383,65,65,64,12',
'145,328,328,12,197,197,12,148,328,150,328,155,328,328,159,328,328,328',
'172,328,328,328,328,174,149,328,328,185,149,328,64,188,328,328,64,12',
'149,183,183,12,328,58,64,59,59,58,328,12,132,190,328,328,132,328,328',
'169,169,206,328,328,328,328,328,328,328,328,328,328,101,101,328,249',
'101,101,211,101,212,58,136,434,434,58,136,213,132,249,214,249,132,58',
'216,249,101,101,231,267,132,274,276,101,282,101,277,101,101,137,101',
'101,101,282,101,101,249,280,136,284,101,101,136,137,101,137,282,101',
'101,137,136,249,249,233,282,101,60,233,249,288,60,101,293,294,295,101',
'101,298,101,101,137,304,305,101,101,101,101,101,313,314,101,101,101',
'331,331,101,315,331,331,233,331,331,60,233,316,138,60,317,318,320,323',
'233,327,329,60,341,346,331,331,138,347,138,349,355,331,138,331,357,331',
'331,283,331,331,331,359,331,331,331,331,283,361,331,331,378,381,331',
'138,385,331,331,387,390,283,393,394,397,331,398,405,407,283,408,331',
'417,419,424,331,331,433,331,331,435,442,446,331,331,331,331,331,331',
'331,331,331,331,336,336,331,449,336,336,244,336,454,455,456,463,472',
'473,475,477,480,483,484,485,244,486,244,490,336,336,244,493,494,499',
'502,336,503,336,504,336,336,516,336,336,336,519,336,336,336,336,521',
'244,336,336,522,530,336,532,534,336,336,538,,,,,,336,,,,,,336,,,,336',
'336,,336,336,,,,336,336,336,336,336,,,336,336,336,102,102,336,,102,102',
',102,,,,,,,,,,,,,,,,,102,102,,,,,,102,,102,,102,102,,102,102,102,,102',
'102,,,,,102,102,,,102,,,102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102',
',,,102,102,102,102,102,,,102,102,102,103,103,102,,103,103,,103,,,,,',
',,,,,,,,,,,103,103,,,,,,103,,103,,103,103,,103,103,103,,103,103,,,,',
'103,103,,,103,,,103,103,,,,,,,103,,,,,,103,,,,103,103,,103,103,,,,103',
'103,103,103,103,,,103,103,103,104,104,103,,104,104,,104,,,,,,,,,,,,',
',,,,104,104,,,,,,104,,104,,104,104,,104,104,104,,104,104,,,,,104,104',
',,104,,,104,104,,,,,,,104,,,,,,104,,,,104,104,,104,104,,,,104,104,104',
'104,104,,,104,104,104,105,105,104,,105,105,,105,,,,,,,,,,,,,,,,,105',
'105,,,,,,105,,105,,105,105,,105,105,105,,105,105,,,,,105,105,,,105,',
',105,105,,,,,,,105,,,,,,105,,,,105,105,,105,105,,,,105,105,105,105,105',
',,105,105,105,351,351,105,,351,351,,351,,,,,,,,,,,,,,,,,351,351,,,,',
',351,,351,,351,351,,351,351,351,,351,351,,,,,351,351,,,351,,,351,351',
',,,,,,351,,,,,,351,,,,351,351,,351,351,,,,351,351,351,351,351,,,351',
'351,351,352,352,351,,352,352,,352,,,,,,,,,,,,,,,,,352,352,,,,,,352,',
'352,,352,352,,352,352,352,,352,352,,,,,352,352,,,352,,,352,352,,,,,',
',352,,,,,,352,,,,352,352,,352,352,,,,352,352,352,352,352,,,352,352,352',
'353,353,352,,353,353,,353,,,,,,,,,,,,,,,,,353,353,,,,,,353,,353,,353',
'353,,353,353,353,,353,353,,,,,353,353,,,353,,,353,353,,,,,,,353,,,,',
',353,,,,353,353,,353,353,,,,353,353,353,353,353,,,353,353,353,354,354',
'353,,354,354,,354,,,,,,,,,,,,,,,,,354,354,,,,,,354,,354,,354,354,,354',
'354,354,,354,354,,,,,354,354,,,354,,,354,354,,,,,,,354,,,,,,354,,,,354',
'354,,354,354,,,,354,354,354,354,354,,,354,354,354,106,106,354,,106,106',
',106,,,,,,,,,,,,,,,,,106,106,,,,,,106,,106,,106,106,,106,106,106,,106',
'106,,,,,106,106,,,106,,,106,106,,,,,,,106,,,,,,106,,,,106,106,,106,106',
',,,106,106,106,106,106,,,106,106,106,107,107,106,,107,107,,107,,,,,',
',,,,,,,,,,,107,107,,,,,,107,,107,,107,107,,107,107,107,,107,107,,,,',
'107,107,,,107,,,107,107,,,,,,,107,,,,,,107,,,,107,107,,107,107,,,,107',
'107,107,107,107,,,107,107,107,358,358,107,,358,358,,358,,,,,,,,,,,,',
',,,,358,358,,,,,,358,,358,,358,358,,358,358,358,,358,358,358,358,,,358',
'358,,,358,,,358,358,,,,,,,358,,,,,,358,,,,358,358,,358,358,,,,358,358',
'358,358,358,358,358,358,358,358,108,108,358,,108,108,,108,,,,,,,,,,',
',,,,,,108,108,,,,,,108,,108,,108,108,,108,108,108,,108,108,,,,,108,108',
',,108,,,108,108,,,,,,,108,,,,,,108,,,,108,108,,108,108,,,,108,108,108',
'108,108,,,108,108,108,109,109,108,,109,109,,109,,,,,,,,,,,,,,,,,109',
'109,,,,,,109,,109,,109,109,,109,109,109,,109,109,,,,,109,109,,,109,',
',109,109,,,,,,,109,,,,,,109,,,,109,109,,109,109,,,,109,109,109,109,109',
',,109,109,109,110,110,109,,110,110,,110,,,,,,,,,,,,,,,,,110,110,,,,',
',110,,110,,110,110,,110,110,110,,110,110,,,,,110,110,,,110,,,110,110',
',,,,,,110,,,,,,110,,,,110,110,,110,110,,,,110,110,110,110,110,,,110',
'110,110,379,379,110,,379,379,,379,,,,,,,,,,,,,,,,,379,379,,,,,,379,',
'379,,379,379,,379,379,379,,379,379,,,,,379,379,,,379,,,379,379,,,,,',
',379,,,,,,379,,,,379,379,,379,379,,,,379,379,379,379,379,,,379,379,379',
'111,111,379,,111,111,,111,,,,,,,,,,,,,,,,,111,111,,,,,,111,,111,,111',
'111,,111,111,111,,111,111,,,,,111,111,,,111,,,111,111,,,,,,,111,,,,',
',111,,,,111,111,,111,111,,,,111,111,111,111,111,,,111,111,111,112,112',
'111,,112,112,,112,,,,,,,,,,,,,,,,,112,112,,,,,,112,,112,,112,112,,112',
'112,112,,112,112,,,,,112,112,,,112,,,112,112,,,,,,,112,,,,,,112,,,,112',
'112,,112,112,,,,112,112,112,112,112,,,112,112,112,113,113,112,,113,113',
',113,,,,,,,,,,,,,,,,,113,113,,,,,,113,,113,,113,113,,113,113,113,,113',
'113,,,,,113,113,,,113,,,113,113,,,,,,,113,,,,,,113,,,,113,113,,113,113',
',,,113,113,113,113,113,,,113,113,113,114,114,113,,114,114,,114,,,,,',
',,,,,,,,,,,114,114,,,,,,114,,114,,114,114,,114,114,114,,114,114,,,,',
'114,114,,,114,,,114,114,,,,,,,114,,,,,,114,,,,114,114,,114,114,,,,114',
'114,114,114,114,,,114,114,114,115,115,114,,115,115,,115,,,,,,,,,,,,',
',,,,115,115,,,,,,115,,115,,115,115,,115,115,115,,115,115,,,,,115,115',
',,115,,,115,115,,,,,,,115,,,,,,115,,,115,115,115,,115,115,,,,115,115',
'115,115,115,,,115,115,115,116,116,115,,116,116,,116,,,,,,,,,,,,,,,,',
'116,116,,,,,,116,,116,,116,116,,116,116,116,,116,116,116,116,,,116,116',
',,116,,,116,116,,,,,,,116,,,,,,116,,,,116,116,,116,116,,,,116,116,116',
'116,116,116,116,116,116,116,396,396,116,,396,396,,396,396,,,,,,,,,,',
',,,,,396,396,,,,,,396,,396,,396,396,,396,396,396,,396,396,396,396,,',
'396,396,,,396,,,396,396,,,,,,,396,,,,,,396,,,,396,396,,396,396,,,,396',
'396,396,396,396,,,396,396,396,19,19,396,,19,19,,19,,,,,,,,,,,,,,,,,19',
'19,,,,,,19,,19,,19,19,,19,19,19,,19,19,,,,,19,19,,,19,,,19,19,,,,,,',
'19,,,,,,19,,,,19,19,,19,19,,,,19,19,19,19,19,,,19,19,19,400,400,19,',
'400,400,,400,,,,,,,,,,,,,,,,,400,400,,,,,,400,,400,,400,400,,400,400',
'400,,400,400,,,,,400,400,,,400,,,400,400,,,,,,,400,,,,,,400,,,,400,400',
',400,400,,,,400,400,400,400,400,,,400,400,400,403,403,400,,403,403,',
'403,,,,,,,,,,,,,,,,,403,403,,,,,,403,,403,,403,403,,403,403,403,,403',
'403,403,403,,,403,403,,,403,,,403,403,,,,,,,403,,,,,,403,,,,403,403',
',403,403,,,,403,403,403,403,403,403,403,403,403,403,120,120,403,,120',
'120,,120,,,,,,,,,,,,,,,,,120,120,,,,,,120,,120,,120,120,,120,120,120',
',120,120,,,,,120,120,,,120,,,120,120,,,,,,,120,,,,,,120,,,,120,120,',
'120,120,,,,120,120,120,120,120,,,120,120,120,121,121,120,,121,121,,121',
',,,,,,,,,,,,,,,,121,121,,,,,,121,,121,,121,121,,121,121,121,,121,121',
',,,,121,121,,,121,,,121,121,,,,,,,121,,,,,,121,,,,121,121,,121,121,',
',,121,121,121,121,121,,,121,121,121,20,20,121,,20,20,,20,,,,,,,,,,,',
',,,,,20,20,,,,,,20,,20,,20,20,,20,20,20,,20,20,20,20,,,20,20,,,20,,',
'20,20,,,,,,,20,,,,,,20,,,,20,20,,20,20,,,,20,20,20,20,20,,,20,20,20',
'411,411,20,,411,411,,411,411,,,,,,,,,,,,,,,,411,411,,,,,,411,,411,,411',
'411,,411,411,411,,411,411,,,,,411,411,,,411,,,411,411,,,,,,,411,,,,',
',411,,,,411,411,,411,411,,,,411,411,411,411,411,,,411,411,411,413,413',
'411,,413,413,,413,,,,,,,,,,,,,,,,,413,413,,,,,,413,,413,,413,413,,413',
'413,413,,413,413,413,413,,,413,413,,,413,,,413,413,,,,,,,413,,,,,,413',
',,,413,413,,413,413,,,,413,413,413,413,413,,,413,413,413,416,416,413',
',416,416,,416,,,,,,,,,,,,,,,,,416,416,,,,,,416,,416,,416,416,,416,416',
'416,,416,416,416,416,,,416,416,,,416,,,416,416,,,,,,,416,,,,,,416,,',
',416,416,,416,416,,,,416,416,416,416,416,,,416,416,416,21,21,416,,21',
'21,,21,,,,,,,,,,,,,,,,,21,21,,,,,,21,,21,,21,21,,21,21,21,,21,21,21',
'21,,,21,21,,,21,,,21,21,,,,,,,21,,,,,,21,,,,21,21,,21,21,,,,21,21,21',
'21,21,,,21,21,21,124,124,21,,124,124,,124,,,,,,,,,,,,,,,,,124,124,,',
',,,124,,124,,124,124,,124,124,124,,124,124,,,,,124,124,,,124,,,124,124',
',,,,,,124,,,,,,124,,,,124,124,,124,124,,,,124,124,124,124,124,,,124',
'124,124,426,426,124,,426,426,,426,,,,,,,,,,,,,,,,,426,426,,,,,,426,',
'426,,426,426,,426,426,426,,426,426,426,426,,,426,426,,,426,,,426,426',
',,,,,,426,,,,,,426,,,,426,426,,426,426,,,,426,426,426,426,426,426,426',
'426,426,426,443,443,426,,443,443,,443,,,,,,,,,,,,,,,,,443,443,,,,,,443',
',443,,443,443,,443,443,443,,443,443,,,,,443,443,,,443,,,443,443,,,,',
',,443,,,,,,443,,,,443,443,,443,443,,,,443,443,443,443,443,,,443,443',
'443,450,450,443,,450,450,,450,,,,,,,,,,,,,,,,,450,450,,,,,,450,,450',
',450,450,,450,450,450,,450,450,450,450,,,450,450,,,450,,,450,450,,,',
',,,450,,,,,,450,,,,450,450,,450,450,,,,450,450,450,450,450,,,450,450',
'450,50,50,450,,50,50,,50,,,,,,,,,,,,,,,,,50,50,50,,,,,50,,50,,50,50',
',50,50,50,,50,50,50,50,,,50,50,,,50,,,50,50,,,,,,,50,,,,,,50,,,,50,50',
',50,50,,,,50,50,50,50,50,50,50,50,50,50,458,458,50,,458,458,,458,,,',
',,,,,,,,,,,,,458,458,,,,,,458,,458,,458,458,,458,458,458,,458,458,458',
'458,,,458,458,,,458,,,458,458,,,,,,,458,,,,,,458,,,,458,458,,458,458',
',,,458,458,458,458,458,,,458,458,458,459,459,458,,459,459,,459,,,,,',
',,,,,,,,,,,459,459,,,,,,459,,459,,459,459,,459,459,459,,459,459,459',
'459,,,459,459,,,459,,,459,459,,,,,,,459,,,,,,459,,,,459,459,,459,459',
',,,459,459,459,459,459,459,459,459,459,459,462,462,459,,462,462,,462',
',,,,,,,,,,,,,,,,462,462,,,,,,462,,462,,462,462,,462,462,462,,462,462',
'462,462,,,462,462,,,462,,,462,462,,,,,,,462,,,,,,462,,,,462,462,,462',
'462,,,,462,462,462,462,462,,,462,462,462,465,465,462,,465,465,,465,',
',,,,,,,,,,,,,,,465,465,,,,,,465,,465,,465,465,,465,465,465,,465,465',
'465,465,,,465,465,,,465,,,465,465,,,,,,,465,,,,,,465,,,,465,465,,465',
'465,,,,465,465,465,465,465,465,465,465,465,465,471,471,465,,471,471',
',471,,,,,,,,,,,,,,,,,471,471,,,,,,471,,471,,471,471,,471,471,471,,471',
'471,,,,,471,471,,,471,,,471,471,,,,,,,471,,,,,,471,,,,471,471,,471,471',
',,,471,471,471,471,471,,,471,471,471,4,4,471,,4,4,,4,,,,,,,,,,,,,,,',
',4,4,,,,,,4,,4,,4,4,,4,4,4,4,4,4,4,4,,,4,4,,,4,,,4,4,,,,,,,4,,,,,,4',
',,,4,4,,4,4,,,,4,4,4,4,4,,,4,4,4,476,476,4,,476,476,,476,,,,,,,,,,,',
',,,,,476,476,,,,,,476,,476,,476,476,,476,476,476,,476,476,,,,,476,476',
',,476,,,476,476,,,,,,,476,,,,,,476,,,,476,476,,476,476,,,,476,476,476',
'476,476,,,476,476,476,54,54,476,,54,54,,54,,,,,,,,,,,,,,,,,54,54,,,',
',,54,,54,,54,54,,54,54,54,,54,54,,,,,54,54,,,54,,,54,54,,,,,,,54,,,',
',,54,,,,54,54,,54,54,,,,54,54,54,54,54,,,54,54,54,55,55,54,,55,55,,55',
',,,,,,,,,,,,,,,,55,55,,,,,,55,,55,,55,55,,55,55,55,,55,55,,,,,55,55',
',,55,,,55,55,,,,,,,55,,,,,,55,,,,55,55,,55,55,,,,55,55,55,55,55,,,55',
'55,55,56,56,55,,56,56,,56,,,,,,,,,,,,,,,,,56,56,,,,,,56,,56,,56,56,',
'56,56,56,,56,56,,,,,56,56,,,56,,,56,56,,,,,,,56,,,,,,56,,,,56,56,,56',
'56,,,,56,56,56,56,56,,,56,56,56,487,487,56,,487,487,,487,487,,,,,,,',
',,,,,,,,487,487,,,,,,487,,487,,487,487,,487,487,487,,487,487,487,487',
',,487,487,,,487,,,487,487,,,,,,,487,,,,,,487,,,,487,487,,487,487,,,',
'487,487,487,487,487,,,487,487,487,489,489,487,,489,489,,489,,,,,,,,',
',,,,,,,,489,489,,,,,,489,,489,,489,489,,489,489,489,,489,489,489,489',
',,489,489,,,489,,,489,489,,,,,,,489,,,,,,489,,,,489,489,,489,489,,,',
'489,489,489,489,489,,,489,489,489,161,161,489,,161,161,,161,,,,,,,,',
',,,,,,,,161,161,161,,,,,161,,161,,161,161,,161,161,161,,161,161,161',
'161,,,161,161,,,161,,,161,161,,,,,,,161,,,,,,161,,,,161,161,,161,161',
',,,161,161,161,161,161,161,161,161,161,161,509,509,161,,509,509,,509',
'509,,,,,,,,,,,,,,,,509,509,,,,,,509,,509,,509,509,,509,509,509,,509',
'509,509,509,,,509,509,,,509,,,509,509,,,,,,,509,,,,,,509,,,,509,509',
',509,509,,,,509,509,509,509,509,,,509,509,509,511,511,509,,511,511,',
'511,511,,,,,,,,,,,,,,,,511,511,,,,,,511,,511,,511,511,,511,511,511,',
'511,511,511,511,,,511,511,,,511,,,511,511,,,,,,,511,,,,,,511,,,,511',
'511,,511,511,,,,511,511,511,511,511,,,511,511,511,513,513,511,,513,513',
',513,,,,,,,,,,,,,,,,,513,513,,,,,,513,,513,,513,513,,513,513,513,,513',
'513,513,513,,,513,513,,,513,,,513,513,,,,,,,513,,,,,,513,,,,513,513',
',513,513,,,,513,513,513,513,513,,,513,513,513,518,518,513,,518,518,',
'518,,,,,,,,,,,,,,,,,518,518,,,,,,518,,518,,518,518,,518,518,518,,518',
'518,518,518,,,518,518,,,518,,,518,518,,,,,,,518,,,,,,518,,,,518,518',
',518,518,,,,518,518,518,518,518,,,518,518,518,170,170,518,,170,170,',
'170,,,,,,,,,,,,,,,,,170,170,,,,,,170,,170,,170,170,,170,170,170,,170',
'170,170,170,,,170,170,,,170,,,170,170,,,,,,,170,,,,,,170,,,,170,170',
',170,170,,,,170,170,170,170,170,170,170,170,170,170,171,171,170,,171',
'171,,171,171,,,,,,,,,,,,,,,,171,171,,,,,,171,,171,,171,171,,171,171',
'171,,171,171,171,171,,,171,171,,,171,,,171,171,,,,,,,171,,,,,,171,,',
',171,171,,171,171,,,,171,171,171,171,171,,,171,171,171,524,524,171,',
'524,524,,524,,,,,,,,,,,,,,,,,524,524,,,,,,524,,524,,524,524,,524,524',
'524,,524,524,,,,,524,524,,,524,,,524,524,,,,,,,524,,,,,,524,,,,524,524',
',524,524,,,,524,524,524,524,524,,,524,524,524,0,0,524,,0,0,,0,,,,,,',
',,,,,,,,,,0,0,,,,,,0,,0,,0,0,,0,0,0,,0,0,0,0,,,0,0,,,0,,,0,0,,,,,,,0',
',,,,,0,,,,0,0,,0,0,0,,,0,0,0,0,0,,,0,0,0,10,10,0,,10,10,,10,,,,,,,,',
',,,,,,,,10,10,,,,,,10,,10,,10,10,,10,10,10,,10,10,10,10,,,10,10,,,10',
',,10,10,,,,,,,10,,,,,,10,,,,10,10,,10,10,,,,10,10,10,10,10,,,10,10,10',
'201,201,10,,201,201,,201,,,,,,,,,,,,,,,,,201,201,,,,,,201,,201,,201',
'201,,201,201,201,,201,201,201,201,,,201,201,,,201,,,201,201,,,,,,,201',
',,,,,201,,,,201,201,,201,201,,,,201,201,201,201,201,,,201,201,201,204',
'204,201,,204,204,,204,204,,,,,,,,,,,,,,,,204,204,,,,,,204,,204,,204',
'204,,204,204,204,,204,204,204,204,,,204,204,,,204,,,204,204,,,,,,,204',
',,,,,204,,,,204,204,,204,204,,,,204,204,204,204,204,204,204,204,204',
'204,11,11,204,,11,11,,11,,,,,,,,,,,,,,,,,11,11,,,,,,11,,11,,11,11,,11',
'11,11,,11,11,11,11,,,11,11,,,11,,,11,11,,,,,,,11,,,,,,11,,,,11,11,,11',
'11,,,,11,11,11,11,11,,,11,11,11,217,217,11,,217,217,,217,,,217,,,,,',
',,,,,,,,217,217,,,,,,217,,217,,217,217,,217,217,217,,217,217,,,,,217',
'217,,,217,,,217,217,,,,,,,217,,,,,,217,,,,217,217,,217,217,,,,217,217',
'217,217,217,,,217,217,217,222,222,217,,222,222,,222,,,,,,,,,,,,,,,,',
'222,222,,,,,,222,,222,,222,222,,222,222,222,,222,222,,,,,222,222,,,222',
',,222,222,,,,,,,222,,,,,,222,,,,222,222,,222,222,,,,222,222,222,222',
'222,,,222,222,222,223,223,222,,223,223,,223,,,,,,,,,,,,,,,,,223,223',
',,,,,223,,223,,223,223,,223,223,223,,223,223,,,,,223,223,,,223,,,223',
'223,,,,,,,223,,,,,,223,,,,223,223,,223,223,,,,223,223,223,223,223,,',
'223,223,223,224,224,223,,224,224,,224,,,,,,,,,,,,,,,,,224,224,,,,,,224',
',224,,224,224,,224,224,224,,224,224,,,,,224,224,,,224,,,224,224,,,,',
',,224,,,,,,224,,,,224,224,,224,224,,,,224,224,224,224,224,,,224,224',
'224,72,72,224,,72,72,72,72,,,,,,,,,,,,,,,,,72,72,,,,,,72,,72,,72,72',
',72,72,72,,72,72,72,72,,,72,72,,,72,,,72,72,,,,,,,72,,,,,,72,,,,72,72',
',72,72,,,,72,72,72,72,72,72,72,72,72,72,265,265,72,,265,265,,265,,,',
',,,,,,,,,,,,,265,265,,,,,,265,,265,,265,265,,265,265,265,,265,265,,',
',,265,265,,,265,,,265,265,,,,,,,265,,,,,,265,,,,265,265,,265,265,,,',
'265,265,265,265,265,,,265,265,265,73,73,265,,73,73,73,73,,,,,,,,,,,',
',,,,,73,73,,,,,,73,,73,,73,73,,73,73,73,,73,73,73,73,,,73,73,,,73,,',
'73,73,,,,,,,73,,,,,,73,,,,73,73,,73,73,,,,73,73,73,73,73,73,73,73,73',
'73,74,74,73,,74,74,,74,74,,,,,,,,,,,,,,,,74,74,,,,,,74,,74,,74,74,,74',
'74,74,,74,74,74,74,,,74,74,,,74,,,74,74,,,,,,,74,,,,,,74,,,,74,74,,74',
'74,,,,74,74,74,74,74,74,74,74,74,74,78,78,74,,78,78,,78,,,,,,,,,,,,',
',,,,78,78,,,,,,78,,78,,78,78,,78,78,78,,78,78,78,78,,,78,78,,,78,,,78',
'78,,,,,,,78,,,,,,78,,,,78,78,,78,78,,,,78,78,78,78,78,,,78,78,78,83',
'83,78,,83,83,,83,,,,,,,,,,,,,,,,,83,83,,,,,,83,,83,,83,83,,83,83,83',
',83,83,,,,,83,83,,,83,,,83,83,,,,,,,83,,,,,,83,,,,83,83,,83,83,,,,83',
'83,83,83,83,,,83,83,83,287,287,83,,287,287,,287,,,,,,,,,,,,,,,,,287',
'287,,,,,,287,,287,,287,287,,287,287,287,,287,287,287,287,,,287,287,',
',287,,,287,287,,,,,,,287,,,,,,287,,,,287,287,,287,287,,,,287,287,287',
'287,287,287,287,287,287,287,17,17,287,,17,17,,17,,,,,,,,,,,,,,,,,17',
'17,,,,,,17,,17,,17,17,,17,17,17,,17,17,,,,,17,17,,,17,,,17,17,,,,,,',
'17,,,,,,17,,,,17,17,,17,17,,,,17,17,17,17,17,,,17,17,17,290,290,17,',
'290,290,,290,,,,,,,,,,,,,,,,,290,290,,,,,,290,,290,,290,290,,290,290',
'290,,290,290,290,290,,,290,290,,,290,,,290,290,,,,,,,290,,,,,,290,,',
',290,290,,290,290,,,,290,290,290,290,290,290,290,290,290,290,291,291',
'290,,291,291,,291,,,,,,,,,,,,,,,,,291,291,,,,,,291,,291,,291,291,,291',
'291,291,,291,291,291,291,,,291,291,,,291,,,291,291,,,,,,,291,,,,,,291',
',,,291,291,,291,291,,,,291,291,291,291,291,291,291,291,291,291,292,292',
'291,,292,292,,292,,,,,,,,,,,,,,,,,292,292,,,,,,292,,292,,292,292,,292',
'292,292,,292,292,292,292,,,292,292,,,292,,,292,292,,,,,,,292,,,,,,292',
',,,292,292,,292,292,,,,292,292,292,292,292,,,292,292,292,86,86,292,',
'86,86,,86,,,,,,,,,,,,,,,,,86,86,,,,,,86,,86,,86,86,,86,86,86,,86,86',
'86,86,,,86,86,,,86,,,86,86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,,86,86',
'86,86,86,,,86,86,86,18,18,86,,18,18,,18,,,,,,,,,,,,,,,,,18,18,,,,,,18',
',18,,18,18,,18,18,18,,18,18,,,,,18,18,,,18,,,18,18,,,,,,,18,,,,,,18',
',,,18,18,,18,18,,,,18,18,18,18,18,,,18,18,18,88,88,18,,88,88,,88,,,',
',,,,,,,,,,,,,88,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,88,88,,,88,88',
',,88,,,88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,,,88',
'88,88,89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,89,,,,,,89,,89,,89,89,',
'89,89,89,,89,89,89,89,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89',
',89,89,,,,89,89,89,89,89,,,89,89,89,90,90,89,,90,90,,90,,,,,,,,,,,,',
',,,,90,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90,90,,,90,90,,,90,,,90',
'90,,,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,,,90,90,90,91',
'91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,91,,,,,,91,,91,,91,91,,91,91,91',
',91,91,91,91,,,91,91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91,91,,91,91,',
',,91,91,91,91,91,,,91,91,91,310,310,91,,310,310,,310,310,,,,,,,,,,,',
',,,,310,310,,,,,,310,,310,,310,310,,310,310,310,,310,310,310,310,,,310',
'310,,,310,,,310,310,,,,,,,310,,,,,,310,,,,310,310,,310,310,,,,310,310',
'310,310,310,,,310,310,310,311,311,310,,311,311,,311,311,,,,,,,,,,,,',
',,,311,311,,,,,,311,,311,,311,311,,311,311,311,,311,311,311,311,,,311',
'311,,,311,,,311,311,,,,,,,311,,,,,,311,,,,311,311,,311,311,,,,311,311',
'311,311,311,,,311,311,311,312,312,311,,312,312,,312,,,,,,,,,,,,,,,,',
'312,312,,,,,,312,,312,,312,312,,312,312,312,,312,312,,,,,312,312,,,312',
',,312,312,,,,,,,312,,,,,,312,,,,312,312,,312,312,,,,312,312,312,312',
'312,,,312,312,312,92,92,312,,92,92,,92,,,,,,,,,,,,,,,,,92,92,,,,,,92',
',92,,92,92,,92,92,92,,92,92,92,92,,,92,92,,,92,,,92,92,,,,,,,92,,,,',
',92,,,,92,92,,92,92,,,,92,92,92,92,92,,,92,92,92,93,93,92,,93,93,,93',
',,,,,,,,,,,,,,,,93,93,,,,,,93,,93,,93,93,,93,93,93,,93,93,93,93,,,93',
'93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93,,93,93,,,,93,93,93,93,93,',
',93,93,93,94,94,93,,94,94,,94,,,,,,,,,,,,,,,,,94,94,,,,,,94,,94,,94',
'94,,94,94,94,,94,94,94,94,,,94,94,,,94,,,94,94,,,,,,,94,,,,,,94,,,,94',
'94,,94,94,,,,94,94,94,94,94,,,94,94,94,95,95,94,,95,95,,95,,,,,,,,,',
',,,,,,,95,95,,,,,,95,,95,,95,95,,95,95,95,,95,95,95,95,,,95,95,,,95',
',,95,95,,,,,,,95,,,,,,95,,,,95,95,,95,95,,,,95,95,95,95,95,,,95,95,95',
'96,96,95,,96,96,,96,,,,,,,,,,,,,,,,,96,96,,,,,,96,96,96,96,96,96,96',
'96,96,96,,96,96,,,,,96,96,96,96,96,,,96,96,,,,,,,96,,,,,96,96,,,,96',
'96,,96,96,,,,96,96,96,96,96,96,96,96,96,96,97,97,96,,97,97,,97,,,,,',
',,,,,,,,,,,97,97,,,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97',
',,97,97,,,,,,,97,,,,,,97,,,,97,97,,97,97,,,,97,97,97,97,97,,,97,97,97',
'98,98,97,,98,98,,98,,,,,,,,,,,,,,,,,98,98,,,,,,98,,98,,98,98,,98,98',
'98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,,98,,,,,,98,,,,98,98,,98,98,,',
',98,98,98,98,98,440,,98,98,98,,,98,,,,,440,440,440,,440,256,440,,440',
',440,440,440,440,,,,,256,256,,256,,,,256,,256,,440,,,,440,440,,,440',
'440,440,440,440,440,,440,440,256,,,,257,440,,,256,256,256,256,256,256',
',256,256,257,257,,257,,256,,257,,257,,,,,,440,,,,,,,,,,232,232,,257',
'232,,,256,512,,,257,257,257,257,257,257,,257,257,512,512,512,,512,257',
'512,,512,,512,512,512,512,,,,,,,232,,,232,,,,,,512,,,257,512,512,,258',
'512,512,512,512,512,512,232,512,512,,,,258,258,512,258,232,232,,258',
',258,,,,,,,,,,,,,,,,,,,258,512,,,,165,,165,258,258,258,258,258,258,',
'258,258,165,165,165,,165,258,165,,165,,165,165,165,165,,,,,,,,,,,,,',
',,165,,,258,165,165,,259,165,165,165,165,165,165,,165,165,,,,259,259',
'165,259,,,,259,,259,,,,,,,,,,,,,,,,,,,259,165,,,,164,,164,259,259,259',
'259,259,259,,259,259,164,164,164,,164,259,164,,164,,164,164,164,164',
',,,,,,,,,,,,,,,164,,,259,164,164,,,164,164,164,164,164,164,,164,164',
'162,,162,,,164,,,,,,,162,162,162,,162,,162,,162,,162,162,162,162,,,',
',,,164,,,,,,,,,162,,,,162,162,,260,162,162,162,162,162,162,,162,162',
',,260,260,260,162,260,,260,,260,,260,260,260,260,,,,,,,,,,,,,,,,260',
'162,,,,261,,,260,260,260,260,260,260,,260,260,261,261,261,,261,260,261',
',261,,261,261,261,261,,,,,,,,,,,,,,,,261,,,260,,261,,,261,261,261,261',
'261,261,262,261,261,,,262,,,261,,,,262,262,262,,262,255,262,,262,,262',
'262,262,262,,,,,,255,,255,,261,,255,,,,262,,,,262,262,,,262,262,262',
'262,262,262,,262,262,255,,,254,,262,,,255,255,255,255,255,255,,255,255',
'254,,254,253,,255,254,,,,,,,,,262,,253,,253,,421,421,253,,421,,254,',
',,,255,,,254,254,254,254,254,254,,254,254,253,,,,,254,,,253,253,253',
'253,,9,,253,253,421,,,421,,253,,,9,9,9,,9,,9,254,9,,9,9,9,9,,421,,,',
',,,,,253,421,421,,,9,,,,9,9,,,9,9,9,9,9,9,,9,9,266,266,,,,9,266,,,,',
',266,266,266,,266,252,266,,266,,266,266,266,266,,,,,,252,9,252,,321',
'321,252,,321,,266,,,,266,266,,,266,266,266,266,266,266,,266,266,252',
',,,,266,,,252,252,252,252,,203,,252,252,321,,,321,,252,,,203,203,203',
',203,,203,266,203,,203,203,203,203,,321,248,,63,63,,,63,,252,321,321',
',,203,248,,248,203,203,,248,203,203,203,203,203,203,,203,203,,,,,,203',
',,,,,248,63,,247,63,203,203,,,,248,248,,,,248,248,247,,247,,203,248',
'247,63,,,,,,,,,,63,63,,,,,,,,,247,,,,,248,,,,,247,247,215,,,247,247',
',,,,,247,,215,215,215,215,215,,215,,215,,215,215,215,215,,,,,,,,,,,',
'247,,,,215,,,,215,215,,273,215,215,215,215,215,215,,215,215,,,273,273',
'273,215,273,,273,,273,,273,273,273,273,,,,,,,,,,,,,,,,273,215,,,273',
'273,,468,273,273,273,273,273,273,,273,273,,,468,468,468,273,468,,468',
',468,,468,468,468,468,,,,,,,,,,,,,,,,468,273,,,468,468,,409,468,468',
'468,468,468,468,,468,468,,,409,409,409,468,409,,409,,409,,409,409,409',
'409,,,,,,,,,,,,,,,,409,468,,,409,409,,,409,409,409,409,409,409,278,409',
'409,,,,,,409,,,,278,278,278,278,278,,278,,278,,278,278,278,278,,,,,',
',,,,409,,,,,,278,,,,278,278,,441,278,278,278,278,278,278,,278,278,,',
'441,441,441,278,441,,441,,441,,441,441,441,441,,,,,,,,,,,,,,,,441,278',
',,441,441,,438,441,441,441,441,441,441,,441,441,,,438,438,438,441,438',
',438,,438,,438,438,438,438,,,,,,,,,,,,,,,,438,441,,,438,438,,439,438',
'438,438,438,438,438,,438,438,,,439,439,439,438,439,,439,,439,,439,439',
'439,439,,,,,,,,,,,,,,,,439,438,,,439,439,,,439,439,439,439,439,439,',
'439,439,,350,350,350,350,439,350,350,350,,350,,350,350,,,,,,,350,350',
'350,,,,350,,,,,,439,,,,,,350,350,,,,,,,,,,,,350,350,350,350,350,350',
'350,350,415,415,415,415,,415,415,415,,415,,415,415,,,,,,,415,415,415',
',,,415,,,,,,,,,,,,415,415,,,,,,,,,,,,415,415,415,415,415,415,415,415',
'348,348,348,348,,348,348,348,,348,,348,348,,,,,,,348,348,348,,,,348',
',,,,,,,,,,,348,348,,,,,,,,,,,,348,348,348,348,348,348,348,348,380,380',
'380,380,,380,380,380,,380,,380,380,,,,,,,380,380,380,,,,380,,,,,,,,',
',,,380,380,,,,,,,,,,,,380,380,380,380,380,380,380,380,272,272,272,272',
',272,272,272,,272,,272,272,,,,,,,272,272,272,,,,272,,,,,,,,,,,,272,272',
',,,,,,,,,,,272,272,272,272,272,272,272,272,388,388,388,388,,388,388',
'388,,388,,388,388,,,,,,,388,388,388,,,,388,,,,,,,,,,,,388,388,,,,,,',
',,,,,388,388,388,388,388,388,388,388' ]
        racc_action_check = arr = ::Array.new(10734, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  5822,    20,   nil,   nil,  4457,    34,   nil,    -8,    78,  9723,
  5913,  6186,   293,   nil,   nil,   nil,   121,  7278,  7733,  2637,
  3092,  3456,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   165,
  3911,    -9,    39,   105,  4639,  4730,  4821,   150,   335,   251,
   426,   111,   153,  9887,   288,   204,   193,   180,   154,   nil,
   nil,   nil,  6641,  6823,  6914,   nil,   nil,   nil,  7005,   nil,
   101,   121,   nil,  7096,   nil,   216,  7642,   210,  7824,  7915,
  8006,  8097,  8461,  8552,  8643,  8734,  8825,  8916,  9007,    89,
   180,   362,   635,   726,   817,   908,  1363,  1454,  1636,  1727,
  1818,  2000,  2091,  2182,  2273,  2364,  2455,   nil,    25,   218,
  2910,  3001,   227,   237,  3547,   223,   nil,   nil,   nil,   nil,
   nil,   nil,   342,   nil,   nil,   212,   372,   394,   460,   248,
   257,   275,   nil,   nil,   276,   224,    86,   153,   294,   282,
   293,   nil,   nil,   nil,   nil,   300,   nil,    12,   nil,   249,
    70,  5094,  9442,   nil,  9384,  9290,   185,   235,    62,   325,
  5549,  5640,   301,   nil,   298,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   307,     4,   310,   nil,   nil,   315,   nil,
   332,   nil,   108,   nil,   nil,   nil,   nil,   296,   nil,   nil,
   226,  6004,   -35,  9852,  6095,   nil,   340,   nil,   nil,   nil,
   nil,   361,   363,   370,   373,  9977,   373,  6277,    90,     7,
    -9,    98,  6368,  6459,  6550,   nil,   nil,    10,    28,    99,
   202,   381,  9193,   423,    17,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   545,    96,     5,  9924,  9880,   360,
    87,   178,  9798,  9669,  9652,  9608,  9105,  9150,  9244,  9338,
  9490,  9536,  9591,   nil,   nil,  6732,  9781,   378,   nil,   nil,
   nil,   nil, 10585, 10025,   344,   nil,   370,   355, 10176,   nil,
   370,   nil,   368,   464,   402,   nil,   nil,  7187,   403,   nil,
  7369,  7460,  7551,   384,   426,   386,   nil,   nil,   426,   nil,
   nil,   nil,   nil,   nil,   427,   407,   -31,   nil,    58,   nil,
  8188,  8279,  8370,   441,   442,   449,   457,   456,   460,   nil,
   432,  9821,   -25,   411,   162,   nil,   nil,   466,   271,   467,
   nil,   453,   nil,   nil,   nil,   nil,   544,   nil,   nil,   nil,
   nil,   464,   nil,   nil,   nil,   nil,   466,   472, 10469,   474,
 10353,   999,  1090,  1181,  1272,   472,   nil,   481,  1545,   483,
   nil,   490,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   495,  1909,
 10527,   497,   nil,   241,   nil,   496,   nil,   499, 10643,   nil,
   441,   nil,   189,   505,   507,   nil,  2546,   510,   447,   140,
  2728,   nil,   nil,  2819,   nil,   510,   160,   511,   489, 10121,
    84,  3183,   nil,  3274,    -2, 10411,  3365,   497,   nil,   517,
   nil,  9692,   nil,   nil,   518,   nil,  3638,   nil,   nil,   nil,
   nil,   nil,   nil,   458,   294,   520,   nil,   nil, 10272, 10320,
  9088, 10224,   524,  3729,   nil,   nil,   525,   nil,   nil,   536,
  3820,   nil,   nil,   nil,   526,   527,   543,   nil,  4002,  4093,
   nil,   nil,  4184,   547,   nil,  4275,   nil,   nil, 10073,   127,
   nil,  4366,   549,   525,   nil,   551,  4548,   552,   nil,   nil,
   552,   nil,   nil,   553,   551,   555,   558,  4912,   nil,  5003,
   556,   nil,   nil,   563,   531,   nil,   nil,   nil,   nil,   565,
   nil,   nil,   566,   568,   570,   nil,   145,   nil,   nil,  5185,
   nil,  5276,  9196,  5367,   nil,   nil,   573,   nil,  5458,   577,
   nil,   582,   588,   nil,  5731,   nil,   nil,   nil,   nil,   nil,
   587,   nil,   589,   nil,   590,   nil,   nil,   nil,   593,   nil,
   nil,   nil,   -27,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -301,    -1,    -2,    -4,    -5,    -8,   -10,   -18,   -23,
  -301,  -301,  -193,   -35,   -36,   -37,   -38,  -301,  -301,  -301,
  -301,  -301,   -70,   -71,   -72,   -73,   -74,   -75,   -76,   -77,
   -78,   -79,   -80,   -81,   -82,   -83,   -84,   -85,   -86,   -87,
   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,   -97,
  -301,  -301,  -105,  -109,  -301,  -301,  -301,  -301,  -301,  -301,
  -301,  -301,  -301,  -301,  -301,  -249,  -272,  -248,  -301,  -220,
  -221,  -222,  -301,  -301,  -301,  -245,  -246,  -247,  -301,  -251,
  -301,  -264,  -267,  -301,  -273,  -301,  -301,    -7,  -301,  -301,
  -301,  -301,  -301,  -301,  -301,  -301,  -146,  -301,  -301,  -301,
  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -103,  -301,  -141,
  -300,  -300,   -24,   -25,  -301,  -300,  -163,  -190,  -191,  -192,
  -193,  -194,  -301,  -158,  -159,   -49,  -193,   -50,   -57,  -301,
  -301,   -14,   -15,   -16,  -274,   -99,  -239,  -241,  -244,  -240,
  -301,  -236,  -242,  -243,  -104,  -210,  -217,  -272,  -106,  -300,
  -301,  -301,  -301,  -117,  -301,  -301,  -300,  -300,  -301,  -300,
  -301,  -301,  -274,  -174,  -176,  -177,  -178,  -179,  -180,  -182,
  -183,  -248,  -249,  -300,  -301,  -274,  -224,  -233,  -234,  -237,
  -274,  -226,  -301,  -229,  -230,  -235,  -250,  -301,  -255,  -258,
  -301,  -262,  -301,  -301,  -301,   548,    -6,    -9,   -11,   -12,
   -13,   -19,   -20,   -21,   -22,  -301,  -274,  -301,   -95,   -96,
   -97,  -292,  -285,  -291,  -279,  -147,  -150,  -301,  -282,  -296,
  -193,  -299,  -288,  -294,  -221,  -222,  -278,  -283,  -284,  -286,
  -287,  -289,  -297,  -298,   -39,   -40,   -41,   -42,   -43,   -44,
   -45,   -46,   -47,   -48,   -51,   -52,   -53,   -54,   -55,   -56,
   -58,   -59,  -301,   -60,  -135,  -301,   -23,  -274,   -64,   -67,
  -110,  -111,  -146,  -145,  -301,  -144,  -301,  -276,  -301,   -30,
  -300,  -195,  -301,  -301,  -301,   -61,   -62,  -275,  -301,  -101,
  -301,  -301,  -262,  -301,  -301,  -301,  -189,  -115,  -274,  -200,
  -202,  -203,  -204,  -205,  -207,  -301,  -301,  -272,  -301,  -108,
  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -274,  -301,  -171,
  -300,  -275,  -301,  -300,  -214,  -215,  -216,  -301,  -275,  -301,
  -227,  -301,  -252,  -253,  -254,  -256,  -301,  -259,  -260,  -261,
  -263,  -274,  -265,  -268,  -270,  -271,    -8,  -301,  -146,  -301,
  -275,  -301,  -301,  -301,  -301,  -274,  -137,  -301,  -275,  -274,
  -149,  -301,  -279,  -280,  -281,  -282,  -285,  -288,  -290,  -291,
  -292,  -293,  -294,  -295,  -296,  -299,  -142,  -143,  -301,  -277,
  -146,  -301,  -166,  -301,  -196,  -274,  -197,  -274,  -146,   -17,
   -98,  -232,  -301,  -301,  -301,  -112,  -301,  -187,  -301,  -275,
  -301,  -208,  -209,  -301,  -107,  -301,  -120,  -301,  -126,   -68,
  -301,  -301,  -130,  -300,  -300,  -146,  -300,  -301,  -170,  -301,
  -184,  -301,  -175,  -181,  -301,  -212,  -301,  -223,  -238,  -225,
  -228,  -231,  -257,  -301,  -301,  -274,   -28,  -148,  -153,  -151,
  -152,  -139,  -301,  -275,   -63,   -65,  -301,   -27,   -31,  -274,
  -300,  -167,  -168,  -169,  -301,  -301,  -274,  -100,  -300,  -301,
  -211,  -218,  -262,  -301,  -114,  -301,  -116,  -201,  -206,  -120,
  -119,  -301,  -301,  -126,  -125,  -301,  -301,  -301,  -129,  -131,
  -301,  -164,  -165,  -301,  -274,  -301,  -301,  -301,  -185,  -300,
  -274,  -266,  -269,  -301,   -32,  -136,  -138,  -140,   -29,  -301,
  -198,  -199,  -301,  -301,  -301,  -113,  -301,  -118,  -121,  -301,
  -124,  -301,   -69,  -300,  -154,  -155,  -301,  -160,  -300,  -301,
  -173,  -301,  -301,   -26,   -33,  -162,  -157,  -102,  -219,  -188,
  -301,  -123,  -301,  -128,  -301,  -133,  -134,  -156,  -301,  -172,
  -186,  -213,  -276,  -122,  -127,  -132,  -161,   -34 ]

racc_goto_table = [
     2,   277,   267,   264,   194,   135,   137,   138,   126,   378,
   139,   140,   177,   175,   158,   155,   187,   187,   343,   294,
   275,   275,   339,   156,   216,   281,   144,   196,   325,   445,
   188,   188,   298,   422,    87,   337,   412,   185,   190,   132,
   141,     3,   162,   164,   165,   493,   269,   448,   470,   474,
   274,   276,   263,   166,   167,   326,   126,   122,   123,   296,
   183,   395,   141,   141,   195,   508,   281,   281,   198,   281,
   411,   203,   534,   355,   341,   437,   169,   381,   207,   208,
   209,   210,   168,   281,   215,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
   259,   260,   261,   262,   266,   451,   195,   289,   273,   273,
   155,   507,   278,   393,   510,   419,   206,   423,   156,   467,
   402,   280,   480,   483,   155,   485,   401,   391,   284,   428,
   445,     1,   126,   488,   194,   479,   338,   308,   335,   211,
   212,   213,   214,   167,   336,   183,   317,   334,   324,   199,
   201,   141,   nil,   356,   385,   387,   nil,   nil,   nil,   499,
   141,   288,   313,   314,   315,   316,   155,   503,   425,   nil,
   nil,   318,   nil,   nil,   nil,   nil,   nil,   392,   nil,   323,
   382,   177,   175,   424,   nil,   155,   nil,   nil,   nil,   320,
   nil,   nil,   nil,   156,   346,   nil,   nil,   nil,   521,   nil,
   359,   340,   327,   nil,   347,   137,   nil,   329,   nil,   nil,
   162,   164,   165,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   420,   269,   nil,   296,   166,   167,   126,   538,   nil,   183,
   nil,   389,   nil,   349,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   155,   155,   nil,   492,
   nil,   nil,   nil,   262,   nil,   nil,   nil,   nil,   nil,   397,
   nil,   431,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   177,   175,   187,   nil,   547,   nil,   435,   141,   nil,   266,
   195,   195,   nil,   504,   357,   432,   188,   nil,   269,   nil,
   nil,   nil,   340,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   409,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   449,   nil,
   405,   407,   490,   nil,   nil,   398,   456,   nil,   141,   nil,
   nil,   195,   nil,   nil,   nil,   nil,   198,   nil,   nil,   nil,
   nil,   496,   nil,   nil,   417,   nil,   nil,   nil,   nil,   438,
   439,   440,   441,   484,   nil,   nil,   266,   389,   195,   nil,
   nil,   506,   457,   nil,   nil,   nil,   269,   nil,   433,   nil,
   nil,   nil,   nil,   155,   nil,   nil,   nil,   278,   nil,   nil,
   177,   175,   442,   nil,   nil,   nil,   446,   nil,   nil,   452,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   468,   269,
   nil,   nil,   nil,   141,   nil,   269,   463,   nil,   nil,   409,
   nil,   542,   454,   nil,   455,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   535,   266,   nil,   195,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   262,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   266,   nil,   195,
   nil,   nil,   494,   266,   nil,   195,   nil,   nil,   nil,   162,
   nil,   nil,   340,   nil,   512,   nil,   498,   nil,   nil,   nil,
   nil,   nil,   nil,   502,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   519,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   516,   nil,   nil,   nil,   nil,   nil,   522,   nil,   530,
   nil,   532,   278,   536 ]

racc_goto_check = [
     2,    15,    24,    66,     9,    12,    12,    12,    73,    16,
     6,     6,    47,    48,    51,    49,     8,     8,   108,    56,
    65,    65,    91,    89,    13,    65,    10,   101,    46,    25,
    96,    96,    58,    81,     5,    97,    63,    92,    92,    75,
     6,     3,    12,    12,    12,    14,     9,    18,    60,    61,
    69,    69,    23,    73,    73,    45,    73,    11,    11,    65,
    73,    57,     6,     6,     6,    59,    65,    65,     6,    65,
    62,    12,    64,    67,    58,    70,    76,    77,     6,     6,
     6,     6,    75,    65,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    78,     6,    51,    12,    12,
    49,    60,    12,    91,    61,    80,     5,    83,    89,    84,
    85,    74,    52,    52,    49,    52,    87,    94,    73,    95,
    25,     1,    73,    81,     9,    63,    98,    10,   102,    11,
    11,    11,    11,    73,   103,    73,    10,   105,    49,   106,
   107,     6,   nil,    66,    58,    58,   nil,   nil,   nil,    52,
     6,    17,    74,    74,    73,    74,    49,    52,    46,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,    24,   nil,    74,
    65,    47,    48,    56,   nil,    49,   nil,   nil,   nil,    17,
   nil,   nil,   nil,    89,     6,   nil,   nil,   nil,    52,   nil,
    13,     2,    17,   nil,     2,    12,   nil,    17,   nil,   nil,
    12,    12,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    65,     9,   nil,    65,    73,    73,    73,    52,   nil,    73,
   nil,     8,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,    49,   nil,   108,
   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,    49,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,     8,   nil,    16,   nil,    13,     6,   nil,    12,
     6,     6,   nil,    91,    17,   101,    96,   nil,     9,   nil,
   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,   nil,
     2,     2,    24,   nil,   nil,    17,    13,   nil,     6,   nil,
   nil,     6,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,
   nil,    66,   nil,   nil,    17,   nil,   nil,   nil,   nil,    12,
    12,    12,    12,    13,   nil,   nil,    12,     8,     6,   nil,
   nil,    24,    51,   nil,   nil,   nil,     9,   nil,    17,   nil,
   nil,   nil,   nil,    49,   nil,   nil,   nil,    12,   nil,   nil,
    47,    48,    17,   nil,   nil,   nil,    17,   nil,   nil,    73,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,     9,
   nil,   nil,   nil,     6,   nil,     9,     2,   nil,   nil,    12,
   nil,    15,    17,   nil,    17,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    65,    12,   nil,     6,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,     6,
   nil,   nil,    17,    12,   nil,     6,   nil,   nil,   nil,    12,
   nil,   nil,     2,   nil,    12,   nil,    17,   nil,   nil,   nil,
   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    17,   nil,   nil,   nil,   nil,   nil,    17,   nil,     2,
   nil,     2,    12,     2 ]

racc_goto_pointer = [
   nil,   131,     0,    41,   nil,    30,   -10,   nil,   -56,   -70,
   -24,    47,   -12,   -72,  -390,  -123,  -268,    17,  -332,   nil,
   nil,   nil,   nil,   -63,  -114,  -329,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  -129,  -156,   -51,   -50,   -36,
   nil,   -38,  -291,   nil,   nil,   nil,  -140,  -233,  -128,  -406,
  -358,  -359,  -242,  -276,  -441,  -100,  -112,  -192,   nil,   -70,
  -275,   nil,   nil,    -4,    -4,    23,    16,  -203,  -278,   nil,
  -205,  -288,   nil,  -205,  -280,  -186,   nil,  -179,   nil,   -28,
   nil,  -179,   -35,   nil,  -163,  -199,   -42,  -165,   -64,   nil,
   nil,   -51,   -59,   -53,   nil,   -50,    69,    69,  -185 ]

racc_goto_default = [
   nil,   nil,   481,   nil,     4,     5,     6,     7,   143,   142,
   nil,     8,     9,   nil,   nil,   nil,   nil,   nil,   279,    13,
    14,    15,    16,   nil,   nil,   268,   410,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    50,   nil,   nil,    52,    53,   159,   nil,   nil,   nil,   163,
   nil,   nil,   nil,   nil,   nil,   482,   nil,   nil,   119,   nil,
   225,   227,   226,    59,   nil,   nil,   125,   nil,   nil,   172,
   nil,   173,   174,   178,   299,   300,   301,   302,   303,   306,
    68,   nil,   nil,   192,   150,   189,   151,    75,    76,    77,
    78,   nil,   nil,   nil,   197,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 99, :_reduce_1,
  1, 99, :_reduce_2,
  0, 99, :_reduce_3,
  1, 100, :_reduce_4,
  1, 102, :_reduce_5,
  3, 102, :_reduce_6,
  2, 102, :_reduce_7,
  1, 103, :_reduce_8,
  3, 103, :_reduce_9,
  1, 104, :_reduce_none,
  3, 104, :_reduce_11,
  3, 104, :_reduce_12,
  3, 104, :_reduce_13,
  1, 106, :_reduce_none,
  1, 106, :_reduce_15,
  1, 108, :_reduce_16,
  3, 108, :_reduce_17,
  1, 105, :_reduce_none,
  3, 105, :_reduce_19,
  3, 105, :_reduce_20,
  3, 105, :_reduce_21,
  3, 105, :_reduce_22,
  1, 109, :_reduce_none,
  2, 109, :_reduce_24,
  2, 109, :_reduce_25,
  7, 109, :_reduce_26,
  5, 109, :_reduce_27,
  5, 109, :_reduce_28,
  4, 116, :_reduce_29,
  1, 113, :_reduce_30,
  3, 113, :_reduce_31,
  1, 112, :_reduce_32,
  2, 112, :_reduce_33,
  4, 112, :_reduce_34,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  3, 110, :_reduce_39,
  3, 110, :_reduce_40,
  3, 110, :_reduce_41,
  3, 110, :_reduce_42,
  3, 110, :_reduce_43,
  3, 110, :_reduce_44,
  3, 110, :_reduce_45,
  3, 110, :_reduce_46,
  3, 110, :_reduce_47,
  3, 110, :_reduce_48,
  2, 110, :_reduce_49,
  2, 110, :_reduce_50,
  3, 110, :_reduce_51,
  3, 110, :_reduce_52,
  3, 110, :_reduce_53,
  3, 110, :_reduce_54,
  3, 110, :_reduce_55,
  3, 110, :_reduce_56,
  2, 110, :_reduce_57,
  3, 110, :_reduce_58,
  3, 110, :_reduce_59,
  3, 110, :_reduce_60,
  3, 110, :_reduce_61,
  3, 110, :_reduce_62,
  5, 120, :_reduce_63,
  1, 122, :_reduce_64,
  3, 122, :_reduce_65,
  1, 123, :_reduce_none,
  1, 123, :_reduce_67,
  1, 124, :_reduce_68,
  3, 124, :_reduce_69,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_93,
  1, 117, :_reduce_94,
  1, 117, :_reduce_95,
  1, 117, :_reduce_96,
  1, 117, :_reduce_97,
  4, 119, :_reduce_98,
  2, 119, :_reduce_99,
  5, 119, :_reduce_100,
  3, 119, :_reduce_101,
  7, 119, :_reduce_102,
  2, 148, :_reduce_103,
  2, 148, :_reduce_104,
  1, 126, :_reduce_105,
  2, 126, :_reduce_106,
  4, 151, :_reduce_107,
  3, 151, :_reduce_108,
  1, 151, :_reduce_109,
  3, 152, :_reduce_110,
  3, 152, :_reduce_111,
  3, 149, :_reduce_112,
  3, 155, :_reduce_113,
  2, 155, :_reduce_114,
  2, 153, :_reduce_115,
  4, 153, :_reduce_116,
  2, 129, :_reduce_117,
  5, 157, :_reduce_118,
  4, 157, :_reduce_119,
  0, 158, :_reduce_none,
  2, 158, :_reduce_121,
  4, 158, :_reduce_122,
  3, 158, :_reduce_123,
  6, 130, :_reduce_124,
  5, 130, :_reduce_125,
  0, 159, :_reduce_none,
  4, 159, :_reduce_127,
  3, 159, :_reduce_128,
  5, 128, :_reduce_129,
  1, 160, :_reduce_130,
  2, 160, :_reduce_131,
  5, 161, :_reduce_132,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 121, :_reduce_none,
  4, 121, :_reduce_136,
  1, 165, :_reduce_137,
  3, 165, :_reduce_138,
  3, 164, :_reduce_139,
  6, 127, :_reduce_140,
  2, 127, :_reduce_141,
  3, 166, :_reduce_142,
  3, 166, :_reduce_143,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  0, 111, :_reduce_146,
  1, 111, :_reduce_147,
  3, 111, :_reduce_148,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  3, 168, :_reduce_151,
  3, 168, :_reduce_152,
  3, 168, :_reduce_153,
  6, 131, :_reduce_154,
  6, 132, :_reduce_155,
  7, 118, :_reduce_156,
  7, 118, :_reduce_157,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  6, 134, :_reduce_160,
  8, 135, :_reduce_161,
  7, 133, :_reduce_162,
  1, 174, :_reduce_163,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 175, :_reduce_none,
  2, 175, :_reduce_167,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  4, 137, :_reduce_170,
  3, 137, :_reduce_171,
  7, 136, :_reduce_172,
  6, 136, :_reduce_173,
  1, 177, :_reduce_174,
  3, 177, :_reduce_175,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_178,
  1, 179, :_reduce_none,
  1, 180, :_reduce_180,
  3, 180, :_reduce_181,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 178, :_reduce_none,
  2, 178, :_reduce_185,
  7, 139, :_reduce_186,
  2, 154, :_reduce_187,
  5, 154, :_reduce_188,
  1, 154, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_193,
  1, 171, :_reduce_194,
  1, 172, :_reduce_195,
  2, 172, :_reduce_196,
  2, 172, :_reduce_197,
  4, 172, :_reduce_198,
  4, 172, :_reduce_199,
  1, 156, :_reduce_200,
  3, 156, :_reduce_201,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  3, 185, :_reduce_206,
  1, 185, :_reduce_207,
  2, 186, :_reduce_208,
  2, 184, :_reduce_209,
  1, 187, :_reduce_210,
  4, 187, :_reduce_211,
  4, 140, :_reduce_212,
  7, 140, :_reduce_213,
  3, 140, :_reduce_214,
  3, 140, :_reduce_215,
  3, 140, :_reduce_216,
  2, 188, :_reduce_217,
  5, 141, :_reduce_218,
  7, 141, :_reduce_219,
  1, 125, :_reduce_220,
  1, 142, :_reduce_221,
  1, 142, :_reduce_222,
  4, 143, :_reduce_223,
  2, 143, :_reduce_224,
  4, 143, :_reduce_225,
  2, 143, :_reduce_226,
  3, 144, :_reduce_227,
  4, 144, :_reduce_228,
  2, 144, :_reduce_229,
  1, 191, :_reduce_230,
  3, 191, :_reduce_231,
  3, 107, :_reduce_232,
  1, 193, :_reduce_none,
  1, 193, :_reduce_234,
  1, 192, :_reduce_none,
  1, 192, :_reduce_236,
  1, 190, :_reduce_237,
  3, 190, :_reduce_238,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 195, :_reduce_248,
  1, 195, :_reduce_249,
  2, 196, :_reduce_250,
  1, 198, :_reduce_251,
  1, 200, :_reduce_252,
  1, 201, :_reduce_253,
  2, 199, :_reduce_254,
  1, 202, :_reduce_255,
  1, 203, :_reduce_256,
  2, 203, :_reduce_257,
  2, 197, :_reduce_258,
  2, 204, :_reduce_259,
  2, 204, :_reduce_260,
  3, 101, :_reduce_261,
  0, 189, :_reduce_none,
  1, 189, :_reduce_none,
  0, 205, :_reduce_264,
  2, 205, :_reduce_265,
  4, 205, :_reduce_266,
  1, 138, :_reduce_267,
  3, 138, :_reduce_268,
  5, 138, :_reduce_269,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 147, :_reduce_272,
  1, 145, :_reduce_273,
  0, 115, :_reduce_none,
  1, 115, :_reduce_275,
  0, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  0, 163, :_reduce_300 ]

racc_reduce_n = 301

racc_shift_n = 548

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :CONSUMES => 89,
  :SITE => 90,
  :PLAN => 91,
  :APPLY => 92,
  :LOW => 93,
  :HIGH => 94,
  :LISTSTART => 95,
  :SPLAT => 96,
  :MODULO => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "PLAN",
  "APPLY",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "argument",
  "hashpair",
  "arguments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "access_args",
  "access_arg",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "plan_expression",
  "apply_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "opt_statements",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "opt_return_type",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "type_alias_lhs",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hash_entry",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_15(val, _values, result)
     result = Factory.HASH_UNFOLDED([val[0]]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_17(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_21(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_22(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_24(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'virtual')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 135)
  def _reduce_25(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'exported')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 146)
  def _reduce_26(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 153)
  def _reduce_27(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 162)
  def _reduce_28(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 184)
  def _reduce_29(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_30(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_31(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_32(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_33(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_34(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_39(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_40(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_41(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_42(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_43(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_44(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_45(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_46(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_47(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_48(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_49(val, _values, result)
     result = val[1].minus            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_50(val, _values, result)
     result = val[1].unfold           ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_51(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_52(val, _values, result)
     result = val[0].eq  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_53(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_54(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_55(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_56(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_57(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_58(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_59(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_60(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 227)
  def _reduce_61(val, _values, result)
     result = val[1].paren            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_62(val, _values, result)
     result = val[1].paren          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_63(val, _values, result)
     result = val[0].access(val[2]); loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_64(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_65(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'egrammar.ra', 239)
  def _reduce_67(val, _values, result)
     result = Factory.HASH_UNFOLDED([val[0]]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_68(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_69(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_93(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 276)
  def _reduce_94(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_95(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_96(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 279)
  def _reduce_97(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_98(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_99(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_100(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_101(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_102(val, _values, result)
          # manifest block
      result = Factory.APPLY(val[1], Factory.apply_block(val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_104(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_105(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_106(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 322)
  def _reduce_107(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_108(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 324)
  def _reduce_109(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 328)
  def _reduce_110(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_111(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_112(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[2][:value], val[1])
      loc result, val[0][:start], val[2][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_113(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_114(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_115(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_116(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_117(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_118(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(val[2], val[1], val[3]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 370)
  def _reduce_119(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'egrammar.ra', 378)
  def _reduce_121(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 382)
  def _reduce_122(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 385)
  def _reduce_123(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_124(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(val[3], val[2], val[4]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 396)
  def _reduce_125(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 406)
  def _reduce_127(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 409)
  def _reduce_128(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_129(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_131(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 428)
  def _reduce_132(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_136(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 449)
  def _reduce_137(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_138(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_139(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 465)
  def _reduce_140(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_141(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 474)
  def _reduce_142(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 475)
  def _reduce_143(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 484)
  def _reduce_146(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 485)
  def _reduce_147(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 486)
  def _reduce_148(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'egrammar.ra', 501)
  def _reduce_151(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_152(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 509)
  def _reduce_153(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 518)
  def _reduce_154(val, _values, result)
          definition = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 530)
  def _reduce_155(val, _values, result)
        definition = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc(definition, val[0], val[5])
    result = add_definition(definition)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 537)
  def _reduce_156(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QREF(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 544)
  def _reduce_157(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 558)
  def _reduce_160(val, _values, result)
          # Remove this plan's name from the namestack as all nested plans have been parsed
      namepop
      definition = Factory.PLAN(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_161(val, _values, result)
          result = Factory.APPLY(val[2], Factory.apply_block(val[6]))
      loc result, val[0], val[7]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_162(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      definition = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_163(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_167(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_170(val, _values, result)
        definition = Factory.SITE(val[2])
    loc(definition, val[0], val[3])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_171(val, _values, result)
        definition = Factory.SITE(nil)
    loc(definition, val[0], val[2])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_172(val, _values, result)
          definition = Factory.NODE(val[1], val[3], val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_173(val, _values, result)
          definition = Factory.NODE(val[1], val[3], nil)
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_174(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_175(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_178(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 179 omitted

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_180(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_181(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_185(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_186(val, _values, result)
          definition = Factory.FUNCTION(val[1][:value], val[2], val[5], val[3])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_187(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_188(val, _values, result)
     result = val[1].access(val[3]) ; loc result, val[1], val[4] 
    result
  end
.,.,

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_193(val, _values, result)
     error val[0], "'class' keyword not allowed at this location" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_194(val, _values, result)
     error val[0], "A quoted string is not valid as a name here" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_196(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_197(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_198(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_199(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_200(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_201(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_206(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_207(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_208(val, _values, result)
     result = val[1]; val[1].captures_rest 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_209(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_210(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_211(val, _values, result)
     result = val[0].access(val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_212(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], Factory.KEY_ENTRY(val[2], val[3]))
      loc(definition, val[0], val[3])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 738)
  def _reduce_213(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2].access(val[4]))
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 743)
  def _reduce_214(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 748)
  def _reduce_215(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 753)
  def _reduce_216(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[4])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 759)
  def _reduce_217(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 765)
  def _reduce_218(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], nil, val[3])
        loc(definition, val[0], val[4])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 770)
  def _reduce_219(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5])
        loc(definition, val[0], val[6])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 779)
  def _reduce_220(val, _values, result)
         fqn = Factory.fqn(val[0][:value])
     loc(fqn, val[0])
     fqn['offset'] += 1
     fqn['length'] -= 1
     result = fqn.var
     loc(result, val[0])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 790)
  def _reduce_221(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 791)
  def _reduce_222(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 797)
  def _reduce_223(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 798)
  def _reduce_224(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 799)
  def _reduce_225(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 800)
  def _reduce_226(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 803)
  def _reduce_227(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 804)
  def _reduce_228(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 805)
  def _reduce_229(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 808)
  def _reduce_230(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 809)
  def _reduce_231(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 812)
  def _reduce_232(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 233 omitted

module_eval(<<'.,.,', 'egrammar.ra', 816)
  def _reduce_234(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

# reduce 235 omitted

module_eval(<<'.,.,', 'egrammar.ra', 821)
  def _reduce_236(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 824)
  def _reduce_237(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 825)
  def _reduce_238(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

module_eval(<<'.,.,', 'egrammar.ra', 842)
  def _reduce_248(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 843)
  def _reduce_249(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 845)
  def _reduce_250(val, _values, result)
     result = Factory.STRING(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 846)
  def _reduce_251(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 847)
  def _reduce_252(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 848)
  def _reduce_253(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 849)
  def _reduce_254(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 850)
  def _reduce_255(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 853)
  def _reduce_256(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 854)
  def _reduce_257(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 857)
  def _reduce_258(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 860)
  def _reduce_259(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 861)
  def _reduce_260(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 864)
  def _reduce_261(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 262 omitted

# reduce 263 omitted

module_eval(<<'.,.,', 'egrammar.ra', 871)
  def _reduce_264(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 872)
  def _reduce_265(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 873)
  def _reduce_266(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 876)
  def _reduce_267(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 877)
  def _reduce_268(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 878)
  def _reduce_269(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(val[2], val[1], val[3])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 270 omitted

# reduce 271 omitted

module_eval(<<'.,.,', 'egrammar.ra', 884)
  def _reduce_272(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 887)
  def _reduce_273(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 274 omitted

module_eval(<<'.,.,', 'egrammar.ra', 893)
  def _reduce_275(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

module_eval(<<'.,.,', 'egrammar.ra', 924)
  def _reduce_300(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
