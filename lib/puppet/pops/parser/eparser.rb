#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 936)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'65,77,158,-149,63,71,304,72,525,378,71,129,72,83,129,126,268,-280,126',
'307,474,-279,403,329,21,20,330,305,177,475,129,53,-292,56,126,67,12',
'404,61,45,48,341,55,46,10,11,-149,128,64,19,128,125,47,307,125,17,18',
'86,269,127,-280,178,127,82,-279,159,128,129,129,54,125,126,126,44,78',
'-292,80,81,127,-189,-189,62,50,68,69,57,65,77,60,59,63,71,70,72,429',
'179,77,70,114,180,87,88,89,128,128,-294,290,125,125,152,21,20,116,351',
'119,127,127,53,115,56,152,67,12,-289,61,45,48,94,55,46,10,11,155,304',
'64,19,291,160,47,118,458,17,18,155,304,457,281,280,-294,82,90,92,91',
'93,305,54,352,307,169,44,78,95,80,81,182,305,-289,147,144,68,69,145',
'151,150,146,59,65,77,70,297,63,71,152,72,523,198,129,129,114,457,126',
'126,425,470,72,469,470,200,469,203,21,20,116,86,119,155,129,53,115,56',
'126,67,12,270,61,45,48,94,55,46,10,11,128,128,64,19,125,125,47,118,452',
'17,18,94,127,127,129,129,283,82,126,126,128,129,284,54,125,126,-234',
'44,78,95,80,81,127,-189,-189,62,50,68,69,57,65,77,60,59,63,71,70,72',
'-193,-193,128,128,114,285,125,125,159,128,131,132,169,125,127,127,21',
'20,116,288,119,127,129,53,115,56,126,67,12,289,61,45,48,304,55,46,10',
'11,332,331,64,19,131,132,47,118,307,17,18,179,77,281,280,180,305,82',
'343,344,128,129,129,54,125,126,126,44,78,293,80,81,127,281,280,62,50',
'68,69,57,65,77,60,59,63,71,70,72,281,280,320,177,114,321,174,-190,-190',
'128,128,281,280,125,125,327,21,20,116,-235,119,127,127,53,115,56,82',
'67,134,383,61,45,48,327,55,46,178,78,304,86,64,19,-191,-191,47,118,94',
'17,18,179,77,307,94,180,94,82,94,349,169,305,129,54,357,375,126,44,78',
'122,80,81,376,378,382,62,50,68,69,57,65,77,60,59,63,71,70,72,387,389',
'393,177,114,395,174,307,397,399,128,400,304,413,125,414,21,20,116,415',
'119,416,127,53,115,56,82,67,134,385,61,45,48,417,55,46,178,78,304,420',
'64,19,293,426,47,118,428,17,18,399,-234,307,433,435,442,82,443,349,350',
'305,446,54,449,399,399,44,78,159,80,81,459,460,463,62,50,68,69,57,65',
'77,60,59,63,71,70,72,464,467,471,473,114,484,486,488,349,492,494,349',
'497,498,349,501,21,20,116,505,119,473,507,53,115,56,509,67,12,510,61',
'45,48,511,55,46,10,11,349,513,64,19,357,518,47,118,519,17,18,179,77',
'520,521,180,522,82,531,532,533,534,536,54,537,538,,44,78,,80,81,,,,62',
'50,68,69,57,65,77,60,59,63,71,70,72,,,,177,,,174,,,,,,,,,,21,20,,,,',
',53,,56,82,67,134,,61,45,48,,55,46,178,78,,,64,19,,,47,,,17,18,179,77',
',,180,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71',
'70,72,,,,177,,,174,,,,,,,,,,21,20,,,,,,53,,56,82,67,134,,61,45,48,,55',
'46,178,78,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62',
'50,68,69,57,65,77,60,59,63,71,70,72,318,,,,,,,,,,,,,,,,21,20,,,,,,53',
',56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,',
',54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,',
'47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,79,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48',
',55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62',
'50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54',
',,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,',
',,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17',
'18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63',
'71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10',
'11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68',
'69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67',
'134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78',
',80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,',
',82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48',
',55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62',
'50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,',
'44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,',
',,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71',
'70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11',
',,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,147,144,68',
'69,145,151,150,146,59,65,77,70,114,63,71,,72,,,,,,,,,,116,,119,,,,115',
'21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,118,,,,64,19,,,47,,,17,18',
',,96,97,,,82,,,95,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59',
'63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55',
'46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50',
'68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,',
'67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44',
'78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,',
'21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,',
',,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,',
',64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69',
'57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134',
',61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80',
'81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,',
',,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,',
'82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48',
',55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62',
'50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,',
'44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,',
',,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71',
'70,72,408,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10',
'11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68',
'69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67',
'134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78',
',80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,',
',82,,,,,,54,,,263,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70',
'72,462,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11',
',,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69',
'57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12',
',61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78',
',80,81,,,,147,144,68,69,145,151,150,146,59,65,77,70,,63,71,,72,406,',
',,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,',
'53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,',
',54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,',
'47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,147,144,68,69,145,151',
'150,146,59,65,77,70,114,63,71,,72,,,,,,,,,,116,,119,,,,115,21,20,,,',
',,53,,56,,67,134,,61,45,48,,55,46,118,,,,64,19,,,47,,,17,18,,,96,97',
',,82,,,95,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,',
',64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69',
'57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134',
',61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80',
'81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,',
',,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82',
',,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,',
',,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,',
',47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,62,50,68,69,57,65,77,60,59,63,71,70,72,476,,,,,,,,,,,,,,,,21,20,,',
',,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,',
',,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,',
',,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,',
'53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,',
',,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,',
',,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48',
',55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62',
'50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54',
',,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,',
',,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17',
'18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63',
'71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10',
'11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,147,144',
'68,69,145,151,150,146,59,65,77,70,114,63,71,,72,,,,,,,,,,116,,119,,',
',115,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,118,,,,64,19,,,47,,',
'17,18,,,96,97,,,82,,,95,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,',
'53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,',
',,,,54,,,,44,78,,80,81,,,,147,144,68,69,145,151,150,146,59,65,77,70',
',63,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46',
',,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68',
'69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,220,235,226',
'236,67,228,238,230,45,218,,222,216,,,,,64,19,239,234,217,,,17,215,,',
',,,,82,,,,,237,221,,,,44,78,,80,81,,,,231,219,232,233,227,241,240,229',
'59,65,77,70,,63,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61',
'45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81',
',,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,',
',53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82',
',,,,,54,,,,44,78,,80,81,,,,147,144,68,69,145,151,150,146,59,65,77,70',
',63,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46',
'10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,147,144',
'68,69,145,151,150,146,59,65,77,70,,63,71,,72,,,,,,,,,,,,,,,,,21,20,',
',,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82',
',,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,202,',
',,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,147,144,68,69,145,151,150,146,59,65,77,70,,63,71,,72,,,,,,,,,,,,,',
',,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17',
'18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63',
'71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10',
'11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68',
'69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67',
'12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44',
'78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,',
'21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18',
',,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71',
'70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11',
',,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,147,144,68',
'69,145,151,150,146,59,65,77,70,,63,71,,72,,,,,,,,,,,,,,,,,21,20,,,,',
',53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82',
',,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,',
',,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,147,144,68,69,145,151,150,146,59,65,77,70,,63,71,,72,,,,,,,,,,,,,',
',,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71',
'70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11',
',,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69',
'57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134',
',61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80',
'81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,191,,,,,,,,,,,,,,,,21,20',
',,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,',
',82,,,,,,54,,,,44,78,,80,81,,,,147,144,68,69,145,151,150,146,59,65,77',
'70,,63,71,,72,,,,,,,,,,,,,,,,,21,20,143,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,147,144,68,69,145,151,150,146,59,65,77,70,,63,71,189,72,,,,,,,,,,',
',,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,',
',17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,147,144,68,69,145,151,150',
'146,59,65,77,70,,63,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134',
',61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80',
'81,,,,62,50,68,69,57,,,60,59,65,77,70,,63,71,184,72,,,,,,,,,,,,,,,,',
'21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18',
',,,,,,82,,,,,,54,,,,44,78,,80,81,,,,147,144,68,69,145,151,150,146,59',
'65,77,70,,63,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45',
'48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,',
',62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53',
',56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54',
',,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,',
',,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17',
'18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63',
'71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46',
',,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68',
'69,57,65,77,60,59,63,71,70,72,515,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,',
'67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,',
',,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,',
',,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,',
'17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59',
'63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55',
'46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50',
'68,69,57,65,77,60,59,63,71,70,72,,,350,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,',
'44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,',
',,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71',
'70,72,296,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10',
'11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68',
'69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67',
'12,,61,45,48,84,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,',
',44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,',
',,,,21,20,309,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47',
',,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,147,144,68,69,145,151,150',
'146,59,65,77,70,,63,71,,72,191,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67',
'12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44',
'78,,80,81,,,,147,144,68,69,145,151,150,146,59,65,77,70,,63,71,,72,527',
',,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,114,',
'64,19,,,47,,,17,18,,,,116,,119,82,,,115,,,54,,,,44,78,,80,81,,,,62,50',
'68,69,57,,118,60,59,,,70,,,,,101,100,114,,,96,97,,,,,,95,,110,105,116',
',119,,113,,115,,106,108,107,109,,,,,,,,,,,102,,,,,118,,,,112,111,,,98',
'99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,,115,',
'106,108,107,109,,,,,,,,,102,,,,,,,118,,,,112,111,,,98,99,101,100,103',
'104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,,115,,106,108,107,109',
',,,,,,,,102,,,,,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,',
',,,,95,,,,110,105,116,,119,,113,,115,,106,108,107,109,,,,,,,,,102,,',
',,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110',
'105,116,,119,,113,,115,,106,108,107,109,,,,,,,,,102,,,,,,,118,,,,112',
'111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113',
',115,,106,108,107,109,,,,,,,,,102,,,,,,,118,,,,112,111,,,98,99,101,100',
'103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,,115,,106,108,107',
'109,,,,,,,,,102,,,,,,,118,,,,112,111,,,98,99,101,100,103,104,,96,97',
'114,,310,,,95,,,,,,,110,105,116,,119,,113,,115,,106,108,107,109,,,,',
',102,,,,,,,,,,118,,,,112,111,,,98,99,101,100,103,104,,96,97,114,,311',
',,95,,,,,,,110,105,116,,119,,113,,115,,106,108,107,109,,,,,,102,,,,',
',,,,,118,,,,112,111,,,98,99,101,100,103,104,,96,97,114,,312,,,95,,,',
',,,110,105,116,,119,,113,,115,,106,108,107,109,,,,,,102,,,,,,,,,,118',
',,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116',
',119,,113,,115,,106,108,107,109,,,,,,,,,102,,,,,,,118,,,114,112,111',
',,98,99,101,100,103,104,,96,97,116,,119,,,95,115,,,,114,,,,,,343,344',
',,,,110,105,116,347,119,118,113,,115,102,106,108,107,109,,101,100,,',
',96,97,,,,,,95,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,',
',,95,,102,,110,105,116,,119,114,113,,115,,106,108,107,109,,,,,,116,',
'119,102,,,115,,,,118,,,,112,111,,,98,99,101,100,103,104,,96,97,118,',
',114,,95,,,98,99,101,100,,,,96,97,116,,119,114,,95,115,,,,,,,,102,,',
'116,,119,,,,115,,,,118,,,,102,,,,98,99,101,100,,,,96,97,118,,,114,,95',
',,98,99,101,100,103,104,,96,97,116,,119,114,,95,115,,,,,,,,102,,105',
'116,,119,,,,115,,106,,118,,,,102,,,,98,99,101,100,103,104,,96,97,118',
',,,114,95,,,98,99,101,100,103,104,,96,97,105,116,,119,114,95,,115,,106',
',,,,102,,,105,116,,119,,,,115,,106,,118,,,102,,,,,98,99,101,100,103',
'104,,96,97,118,,,,114,95,,,98,99,101,100,103,104,,96,97,105,116,,119',
',95,,115,,106,,,,,102,,,,,,,,,,,,,,118,,,102,,114,,,98,99,101,100,103',
'104,,96,97,110,105,116,,119,95,113,,115,,106,108,107,109,,,,,,,,,,,',
',,,,118,,102,,,114,,,98,99,101,100,103,104,,96,97,110,105,116,,119,95',
'113,,115,,106,108,107,109,,,,,,,,,,,,,,,,118,,102,,,111,,,98,99,101',
'100,103,104,114,96,97,,,353,,,95,,,,110,105,116,,119,,113,,115,,106',
'108,107,109,,,,,,,,,102,,,,,,,118,,,,112,111,,,98,99,101,100,103,104',
',96,97,114,-66,,,,95,-66,,,,,,110,105,116,,119,,113,,115,,106,108,107',
'109,,,,,,102,,,,,,,,,,118,,,,112,111,,,98,99,101,100,103,104,114,96',
'97,,,,,,95,,,,110,105,116,,119,,113,,115,,106,108,107,109,,,,,,,,,102',
',,,,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110',
'105,116,379,119,,113,,115,,106,108,107,109,,,,,,,,,102,,,,,,,118,,,',
'112,111,,,98,99,101,100,103,104,,96,97,,365,235,364,236,95,362,238,366',
',359,,361,363,,,,,,,239,234,367,,,,360,,,,,102,,,,,,,237,368,,,,,,,',
',,,,371,369,372,370,373,241,240,374,365,235,364,236,,362,238,366,,359',
',361,363,,,,,,,239,234,367,,,,360,,,,,,,,,,,,237,368,,,,,,,,,,,,371',
'369,372,370,373,241,240,374,365,235,364,236,,362,238,366,,359,,361,363',
',,,,,,239,234,367,,,,360,,,,,,,,,,,,237,368,,,,,,,,,,,,371,369,372,370',
'373,241,240,374,365,235,364,236,,362,238,366,,359,,361,363,,,,,,,239',
'234,367,,,,360,,,,,,,,,,,,237,368,,,,,,,,,,,,371,369,372,370,373,241',
'240,374,365,235,364,236,,362,238,366,,359,,361,363,,,,,,,239,234,367',
',,,360,,,,,,,,,,,,237,368,,,,,,,,,,,,371,369,372,370,373,241,240,374',
'365,235,364,236,,362,238,366,,359,,361,363,,,,,,,239,234,367,,,,360',
',,,,,,,,,,,237,368,,,,,,,,,,,,371,369,372,370,373,241,240,374' ]
        racc_action_table = arr = ::Array.new(10167, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'505,505,51,218,505,505,200,505,505,535,182,228,182,1,59,228,116,216',
'59,200,410,228,308,190,505,505,190,200,321,410,147,505,233,505,147,505',
'505,308,505,505,505,200,505,505,505,505,218,228,505,505,59,228,505,182',
'59,505,505,5,116,228,216,321,59,505,228,51,147,226,227,505,147,226,227',
'505,505,233,505,505,147,218,218,505,505,505,505,505,330,330,505,505',
'330,330,505,330,330,198,198,182,243,198,7,7,7,226,227,232,155,226,227',
'144,330,330,243,225,243,226,227,330,243,330,50,330,330,217,330,330,330',
'8,330,330,330,330,144,306,330,330,155,52,330,243,391,330,330,50,159',
'391,165,165,232,330,7,7,7,7,306,330,225,159,60,330,330,243,330,330,66',
'159,217,330,330,330,330,330,330,330,330,330,509,509,330,159,509,509',
'219,509,502,78,231,382,244,502,231,382,323,406,323,406,467,79,467,83',
'509,509,244,85,244,219,145,509,244,509,145,509,509,117,509,509,509,120',
'509,509,509,509,231,382,509,509,231,382,509,244,382,509,509,121,231',
'382,134,130,137,509,134,130,145,167,138,509,145,167,139,509,509,244',
'509,509,145,48,48,509,509,509,509,509,335,335,509,509,335,335,509,335',
'65,65,134,130,133,142,134,130,143,167,16,16,146,167,134,130,335,335',
'133,148,133,167,56,335,133,335,56,335,335,153,335,335,335,399,335,335',
'335,335,195,195,335,335,58,58,335,133,399,335,335,420,420,123,123,420',
'399,335,433,433,56,57,62,335,56,57,62,335,335,157,335,335,56,168,168',
'335,335,335,335,335,99,99,335,335,99,99,335,99,166,166,170,420,242,172',
'420,63,63,57,62,181,181,57,62,183,99,99,242,186,242,57,62,99,242,99',
'420,99,99,280,99,99,99,188,99,99,420,420,280,204,99,99,64,64,99,242',
'209,99,99,230,230,280,210,230,211,99,212,214,229,280,12,99,265,272,12',
'99,99,12,99,99,274,275,278,99,99,99,99,99,100,100,99,99,100,100,99,100',
'282,286,291,230,136,292,230,293,295,298,12,304,305,313,12,314,100,100',
'136,315,136,316,12,100,136,100,230,100,100,281,100,100,100,317,100,100',
'230,230,281,319,100,100,322,326,100,136,328,100,100,340,345,281,346',
'348,354,100,356,358,360,281,377,100,380,384,386,100,100,389,100,100',
'392,393,396,100,100,100,100,100,199,199,100,100,199,199,100,199,398',
'405,407,408,135,418,423,432,434,441,445,448,453,454,455,461,199,199',
'135,470,135,471,473,199,135,199,475,199,199,478,199,199,199,481,199',
'199,199,199,482,483,199,199,487,490,199,135,491,199,199,320,320,496',
'499,320,500,199,512,514,516,517,524,199,526,528,,199,199,,199,199,,',
',199,199,199,199,199,519,519,199,199,519,519,199,519,,,,320,,,320,,',
',,,,,,,519,519,,,,,,519,,519,320,519,519,,519,519,519,,519,519,320,320',
',,519,519,,,519,,,519,519,61,61,,,61,,519,,,,,,519,,,,519,519,,519,519',
',,,519,519,519,519,519,55,55,519,519,55,55,519,55,,,,61,,,61,,,,,,,',
',,55,55,,,,,,55,,55,61,55,55,,55,55,55,,55,55,61,61,,,55,55,,,55,,,55',
'55,,,,,,,55,,,,,,55,,,,55,55,,55,55,,,,55,55,55,55,55,169,169,55,55',
'169,169,55,169,169,,,,,,,,,,,,,,,,169,169,,,,,,169,,169,,169,169,,169',
'169,169,,169,169,169,169,,,169,169,,,169,,,169,169,,,,,,,169,,,,,,169',
',,,169,169,,169,169,,,,169,169,169,169,169,0,0,169,169,0,0,169,0,,,',
',,,,,,,,,,,,,0,0,,,,,,0,,0,,0,0,,0,0,0,,0,0,0,0,,,0,0,,,0,,,0,0,,,,',
',,0,,,,,,0,,,,0,0,,0,0,0,,,0,0,0,0,0,101,101,0,0,101,101,0,101,,,,,',
',,,,,,,,,,,101,101,,,,,,101,,101,,101,101,,101,101,101,,101,101,,,,',
'101,101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,,,,101',
'101,101,101,101,93,93,101,101,93,93,101,93,,,,,,,,,,,,,,,,,93,93,,,',
',,93,,93,,93,93,,93,93,93,,93,93,93,93,,,93,93,,,93,,,93,93,,,,,,,93',
',,,,,93,,,,93,93,,93,93,,,,93,93,93,93,93,102,102,93,93,102,102,93,102',
',,,,,,,,,,,,,,,,102,102,,,,,,102,,102,,102,102,,102,102,102,,102,102',
',,,,102,102,,,102,,,102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102,',
',,102,102,102,102,102,92,92,102,102,92,92,102,92,,,,,,,,,,,,,,,,,92',
'92,,,,,,92,,92,,92,92,,92,92,92,,92,92,92,92,,,92,92,,,92,,,92,92,,',
',,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92,92,350,350,92,92,350,350',
'92,350,,,,,,,,,,,,,,,,,350,350,,,,,,350,,350,,350,350,,350,350,350,',
'350,350,,,,,350,350,,,350,,,350,350,,,,,,,350,,,,,,350,,,,350,350,,350',
'350,,,,350,350,350,350,350,351,351,350,350,351,351,350,351,,,,,,,,,',
',,,,,,,351,351,,,,,,351,,351,,351,351,,351,351,351,,351,351,,,,,351',
'351,,,351,,,351,351,,,,,,,351,,,,,,351,,,,351,351,,351,351,,,,351,351',
'351,351,351,352,352,351,351,352,352,351,352,,,,,,,,,,,,,,,,,352,352',
',,,,,352,,352,,352,352,,352,352,352,,352,352,,,,,352,352,,,352,,,352',
'352,,,,,,,352,,,,,,352,,,,352,352,,352,352,,,,352,352,352,352,352,353',
'353,352,352,353,353,352,353,,,,,,,,,,,,,,,,,353,353,,,,,,353,,353,,353',
'353,,353,353,353,,353,353,,,,,353,353,,,353,,,353,353,,,,,,,353,,,,',
',353,,,,353,353,,353,353,,,,353,353,353,353,353,103,103,353,353,103',
'103,353,103,,,,,,,,,,,,,,,,,103,103,,,,,,103,,103,,103,103,,103,103',
'103,,103,103,,,,,103,103,,,103,,,103,103,,,,,,,103,,,,,,103,,,,103,103',
',103,103,,,,103,103,103,103,103,104,104,103,103,104,104,103,104,,,,',
',,,,,,,,,,,,104,104,,,,,,104,,104,,104,104,,104,104,104,,104,104,,,',
',104,104,,,104,,,104,104,,,,,,,104,,,,,,104,,,,104,104,,104,104,,,,104',
'104,104,104,104,357,357,104,104,357,357,104,357,,,,,,,,,,,,,,,,,357',
'357,,,,,,357,,357,,357,357,,357,357,357,,357,357,357,357,,,357,357,',
',357,,,357,357,,,,,,,357,,,,,,357,,,,357,357,,357,357,,,,357,357,357',
'357,357,357,357,357,357,105,105,357,249,105,105,,105,,,,,,,,,,249,,249',
',,,249,105,105,,,,,,105,,105,,105,105,,105,105,105,,105,105,249,,,,105',
'105,,,105,,,105,105,,,249,249,,,105,,,249,,,105,,,,105,105,,105,105',
',,,105,105,105,105,105,106,106,105,105,106,106,105,106,,,,,,,,,,,,,',
',,,106,106,,,,,,106,,106,,106,106,,106,106,106,,106,106,,,,,106,106',
',,106,,,106,106,,,,,,,106,,,,,,106,,,,106,106,,106,106,,,,106,106,106',
'106,106,107,107,106,106,107,107,106,107,,,,,,,,,,,,,,,,,107,107,,,,',
',107,,107,,107,107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107',
',,,,,,107,,,,,,107,,,,107,107,,107,107,,,,107,107,107,107,107,378,378',
'107,107,378,378,107,378,,,,,,,,,,,,,,,,,378,378,,,,,,378,,378,,378,378',
',378,378,378,,378,378,,,,,378,378,,,378,,,378,378,,,,,,,378,,,,,,378',
',,,378,378,,378,378,,,,378,378,378,378,378,91,91,378,378,91,91,378,91',
',,,,,,,,,,,,,,,,91,91,,,,,,91,,91,,91,91,,91,91,91,,91,91,91,91,,,91',
'91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91,91,,91,91,,,,91,91,91,91,91,108',
'108,91,91,108,108,91,108,,,,,,,,,,,,,,,,,108,108,,,,,,108,,108,,108',
'108,,108,108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,,,108,,,,',
',108,,,,108,108,,108,108,,,,108,108,108,108,108,90,90,108,108,90,90',
'108,90,,,,,,,,,,,,,,,,,90,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90',
'90,,,90,90,,,90,,,90,90,,,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90',
'90,90,109,109,90,90,109,109,90,109,,,,,,,,,,,,,,,,,109,109,,,,,,109',
',109,,109,109,,109,109,109,,109,109,,,,,109,109,,,109,,,109,109,,,,',
',,109,,,,,,109,,,,109,109,,109,109,,,,109,109,109,109,109,110,110,109',
'109,110,110,109,110,,,,,,,,,,,,,,,,,110,110,,,,,,110,,110,,110,110,',
'110,110,110,,110,110,,,,,110,110,,,110,,,110,110,,,,,,,110,,,,,,110',
',,,110,110,,110,110,,,,110,110,110,110,110,312,312,110,110,312,312,110',
'312,,,,,,,,,,,,,,,,,312,312,,,,,,312,,312,,312,312,,312,312,312,,312',
'312,,,,,312,312,,,312,,,312,312,,,,,,,312,,,,,,312,,,,312,312,,312,312',
',,,312,312,312,312,312,111,111,312,312,111,111,312,111,,,,,,,,,,,,,',
',,,111,111,,,,,,111,,111,,111,111,,111,111,111,,111,111,,,,,111,111',
',,111,,,111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111,,,,111,111,111',
'111,111,311,311,111,111,311,311,111,311,311,,,,,,,,,,,,,,,,311,311,',
',,,,311,,311,,311,311,,311,311,311,,311,311,311,311,,,311,311,,,311',
',,311,311,,,,,,,311,,,,,,311,,,,311,311,,311,311,,,,311,311,311,311',
'311,112,112,311,311,112,112,311,112,,,,,,,,,,,,,,,,,112,112,,,,,,112',
',112,,112,112,,112,112,112,,112,112,,,,,112,112,,,112,,,112,112,,,,',
',,112,,,,,,112,,,,112,112,,112,112,,,,112,112,112,112,112,113,113,112',
'112,113,113,112,113,,,,,,,,,,,,,,,,,113,113,,,,,,113,,113,,113,113,',
'113,113,113,,113,113,,,,,113,113,,,113,,,113,113,,,,,,,113,,,,,,113',
',,113,113,113,,113,113,,,,113,113,113,113,113,395,395,113,113,395,395',
'113,395,395,,,,,,,,,,,,,,,,395,395,,,,,,395,,395,,395,395,,395,395,395',
',395,395,395,395,,,395,395,,,395,,,395,395,,,,,,,395,,,,,,395,,,,395',
'395,,395,395,,,,395,395,395,395,395,114,114,395,395,114,114,395,114',
',,,,,,,,,,,,,,,,114,114,,,,,,114,,114,,114,114,,114,114,114,,114,114',
'114,114,,,114,114,,,114,,,114,114,,,,,,,114,,,,,,114,,,,114,114,,114',
'114,,,,114,114,114,114,114,114,114,114,114,310,310,114,,310,310,,310',
'310,,,,,,,,,,,,,,,,310,310,,,,,,310,,310,,310,310,,310,310,310,,310',
'310,310,310,,,310,310,,,310,,,310,310,,,,,,,310,,,,,,310,,,,310,310',
',310,310,,,,310,310,310,310,310,89,89,310,310,89,89,310,89,,,,,,,,,',
',,,,,,,89,89,,,,,,89,,89,,89,89,,89,89,89,,89,89,89,89,,,89,89,,,89',
',,89,89,,,,,,,89,,,,,,89,,,,89,89,,89,89,,,,89,89,89,89,89,400,400,89',
'89,400,400,89,400,,,,,,,,,,,,,,,,,400,400,,,,,,400,,400,,400,400,,400',
'400,400,,400,400,,,,,400,400,,,400,,,400,400,,,,,,,400,,,,,,400,,,,400',
'400,,400,400,,,,400,400,400,400,400,403,403,400,400,403,403,400,403',
',,,,,,,,,,,,,,,,403,403,,,,,,403,,403,,403,403,,403,403,403,,403,403',
'403,403,,,403,403,,,403,,,403,403,,,,,,,403,,,,,,403,,,,403,403,,403',
'403,,,,403,403,403,403,403,403,403,403,403,17,17,403,248,17,17,,17,',
',,,,,,,,248,,248,,,,248,17,17,,,,,,17,,17,,17,17,,17,17,17,,17,17,248',
',,,17,17,,,17,,,17,17,,,248,248,,,17,,,248,,,17,,,,17,17,,17,17,,,,17',
'17,17,17,17,88,88,17,17,88,88,17,88,,,,,,,,,,,,,,,,,88,88,,,,,,88,,88',
',88,88,,88,88,88,,88,88,88,88,,,88,88,,,88,,,88,88,,,,,,,88,,,,,,88',
',,,88,88,,88,88,,,,88,88,88,88,88,118,118,88,88,118,118,88,118,,,,,',
',,,,,,,,,,,118,118,,,,,,118,,118,,118,118,,118,118,118,,118,118,,,,',
'118,118,,,118,,,118,118,,,,,,,118,,,,,,118,,,,118,118,,118,118,,,,118',
'118,118,118,118,119,119,118,118,119,119,118,119,,,,,,,,,,,,,,,,,119',
'119,,,,,,119,,119,,119,119,,119,119,119,,119,119,,,,,119,119,,,119,',
',119,119,,,,,,,119,,,,,,119,,,,119,119,,119,119,,,,119,119,119,119,119',
'95,95,119,119,95,95,119,95,,,,,,,,,,,,,,,,,95,95,,,,,,95,,95,,95,95',
',95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,,,95,,,,,,95,,,,95,95,,95',
'95,,,,95,95,95,95,95,87,87,95,95,87,87,95,87,,,,,,,,,,,,,,,,,87,87,',
',,,,87,,87,,87,87,,87,87,87,,87,87,87,87,,,87,87,,,87,,,87,87,,,,,,',
'87,,,,,,87,,,,87,87,,87,87,,,,87,87,87,87,87,411,411,87,87,411,411,87',
'411,411,,,,,,,,,,,,,,,,411,411,,,,,,411,,411,,411,411,,411,411,411,',
'411,411,,,,,411,411,,,411,,,411,411,,,,,,,411,,,,,,411,,,,411,411,,411',
'411,,,,411,411,411,411,411,413,413,411,411,413,413,411,413,,,,,,,,,',
',,,,,,,413,413,,,,,,413,,413,,413,413,,413,413,413,,413,413,413,413',
',,413,413,,,413,,,413,413,,,,,,,413,,,,,,413,,,,413,413,,413,413,,,',
'413,413,413,413,413,414,414,413,413,414,414,413,414,,,,,,,,,,,,,,,,',
'414,414,,,,,,414,,414,,414,414,,414,414,414,,414,414,414,414,,,414,414',
',,414,,,414,414,,,,,,,414,,,,,,414,,,,414,414,,414,414,,,,414,414,414',
'414,414,86,86,414,414,86,86,414,86,,,,,,,,,,,,,,,,,86,86,,,,,,86,,86',
',86,86,,86,86,86,,86,86,86,86,,,86,86,,,86,,,86,86,,,,,,,86,,,,,,86',
',,,86,86,,86,86,,,,86,86,86,86,86,416,416,86,86,416,416,86,416,,,,,',
',,,,,,,,,,,416,416,,,,,,416,,416,,416,416,,416,416,416,,416,416,416',
'416,,,416,416,,,416,,,416,416,,,,,,,416,,,,,,416,,,,416,416,,416,416',
',,,416,416,416,416,416,18,18,416,416,18,18,416,18,,,,,,,,,,,,,,,,,18',
'18,,,,,,18,,18,,18,18,,18,18,18,,18,18,,,,,18,18,,,18,,,18,18,,,,,,',
'18,,,,,,18,,,,18,18,,18,18,,,,18,18,18,18,18,84,84,18,18,84,84,18,84',
',,,,,,,,,,,,,,,,84,84,,,,,,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84',
'84,,,84,,,84,84,,,,,,,84,,,,,,84,,,,84,84,,84,84,,,,84,84,84,84,84,19',
'19,84,84,19,19,84,19,,,,,,,,,,,,,,,,,19,19,,,,,,19,,19,,19,19,,19,19',
'19,,19,19,,,,,19,19,,,19,,,19,19,,,,,,,19,,,,,,19,,,,19,19,,19,19,,',
',19,19,19,19,19,425,425,19,19,425,425,19,425,,,,,,,,,,,,,,,,,425,425',
',,,,,425,,425,,425,425,,425,425,425,,425,425,425,425,,,425,425,,,425',
',,425,425,,,,,,,425,,,,,,425,,,,425,425,,425,425,,,,425,425,425,425',
'425,425,425,425,425,122,122,425,247,122,122,,122,,,,,,,,,,247,,247,',
',,247,122,122,,,,,,122,,122,,122,122,,122,122,122,,122,122,247,,,,122',
'122,,,122,,,122,122,,,247,247,,,122,,,247,,,122,,,,122,122,,122,122',
',,,122,122,122,122,122,290,290,122,122,290,290,122,290,,,,,,,,,,,,,',
',,,290,290,,,,,,290,,290,,290,290,,290,290,290,,290,290,290,290,,,290',
'290,,,290,,,290,290,,,,,,,290,,,,,,290,,,,290,290,,290,290,,,,290,290',
'290,290,290,289,289,290,290,289,289,290,289,,,,,,,,,,,,,,,,,289,289',
',,,,,289,,289,,289,289,,289,289,289,,289,289,289,289,,,289,289,,,289',
',,289,289,,,,,,,289,,,,,,289,,,,289,289,,289,289,,,,289,289,289,289',
'289,289,289,289,289,96,96,289,,96,96,,96,,,,,,,,,,,,,,,,,96,96,,,,,',
'96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,,,96,,,,,',
'96,,,,96,96,,96,96,,,,96,96,96,96,96,94,94,96,96,94,94,96,94,,,,,,,',
',,,,,,,,,94,94,,,,,,94,94,94,94,94,94,94,94,94,94,,94,94,,,,,94,94,94',
'94,94,,,94,94,,,,,,,94,,,,,94,94,,,,94,94,,94,94,,,,94,94,94,94,94,94',
'94,94,94,97,97,94,,97,97,,97,,,,,,,,,,,,,,,,,97,97,,,,,,97,,97,,97,97',
',97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97,,97',
'97,,,,97,97,97,97,97,327,327,97,97,327,327,97,327,,,,,,,,,,,,,,,,,327',
'327,,,,,,327,,327,,327,327,,327,327,327,,327,327,327,327,,,327,327,',
',327,,,327,327,,,,,,,327,,,,,,327,,,,327,327,,327,327,,,,327,327,327',
'327,327,327,327,327,327,288,288,327,,288,288,,288,,,,,,,,,,,,,,,,,288',
'288,,,,,,288,,288,,288,288,,288,288,288,,288,288,288,288,,,288,288,',
',288,,,288,288,,,,,,,288,,,,,,288,,,,288,288,,288,288,,,,288,288,288',
'288,288,288,288,288,288,442,442,288,,442,442,,442,,,,,,,,,,,,,,,,,442',
'442,,,,,,442,,442,,442,442,,442,442,442,,442,442,,,,,442,442,,,442,',
',442,442,,,,,,,442,,,,,,442,,,,442,442,,442,442,,,,442,442,442,442,442',
'81,81,442,442,81,81,442,81,,,,,,,,,,,,,,,,,81,81,,,,,,81,,81,,81,81',
',81,81,81,,81,81,,,,,81,81,,,81,,,81,81,,,,,,,81,,,,,,81,,,,81,81,,81',
'81,,,,81,81,81,81,81,285,285,81,81,285,285,81,285,,,,,,,,,,,,,,,,,285',
'285,,,,,,285,,285,,285,285,,285,285,285,,285,285,285,285,,,285,285,',
',285,,,285,285,,,,,,,285,,,,,,285,,,,285,285,,285,285,,,,285,285,285',
'285,285,285,285,285,285,449,449,285,,449,449,,449,,,,,,,,,,,,,,,,,449',
'449,,,,,,449,,449,,449,449,,449,449,449,,449,449,449,449,,,449,449,',
',449,,,449,449,,,,,,,449,,,,,,449,,,,449,449,,449,449,,,,449,449,449',
'449,449,11,11,449,449,11,11,449,11,,,,,,,,,,,,,,,,,11,11,,,,,,11,,11',
',11,11,,11,11,11,,11,11,11,11,,,11,11,,,11,,,11,11,,,,,,,11,,,,,,11',
',,,11,11,,11,11,,,,11,11,11,11,11,10,10,11,11,10,10,11,10,,,,,,,,,,',
',,,,,,10,10,,,,,,10,,10,,10,10,,10,10,10,,10,10,10,10,,,10,10,,,10,',
',10,10,,,,,,,10,,,,,,10,,,,10,10,,10,10,,,,10,10,10,10,10,20,20,10,10',
'20,20,10,20,,,,,,,,,,,,,,,,,20,20,,,,,,20,,20,,20,20,,20,20,20,,20,20',
'20,20,,,20,20,,,20,,,20,20,,,,,,,20,,,,,,20,,,,20,20,,20,20,,,,20,20',
'20,20,20,457,457,20,20,457,457,20,457,,,,,,,,,,,,,,,,,457,457,,,,,,457',
',457,,457,457,,457,457,457,,457,457,457,457,,,457,457,,,457,,,457,457',
',,,,,,457,,,,,,457,,,,457,457,,457,457,,,,457,457,457,457,457,457,457',
'457,457,460,460,457,,460,460,,460,,,,,,,,,,,,,,,,,460,460,,,,,,460,',
'460,,460,460,,460,460,460,,460,460,460,460,,,460,460,,,460,,,460,460',
',,,,,,460,,,,,,460,,,,460,460,,460,460,,,,460,460,460,460,460,21,21',
'460,460,21,21,460,21,,,,,,,,,,,,,,,,,21,21,,,,,,21,,21,,21,21,,21,21',
'21,,21,21,21,21,,,21,21,,,21,,,21,21,,,,,,,21,,,,,,21,,,,21,21,,21,21',
',,,21,21,21,21,21,463,463,21,21,463,463,21,463,,,,,,,,,,,,,,,,,463,463',
',,,,,463,,463,,463,463,,463,463,463,,463,463,463,463,,,463,463,,,463',
',,463,463,,,,,,,463,,,,,,463,,,,463,463,,463,463,,,,463,463,463,463',
'463,463,463,463,463,98,98,463,,98,98,,98,,,,,,,,,,,,,,,,,98,98,,,,,',
'98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,,98,,,,,',
'98,,,,98,98,,98,98,,,,98,98,98,98,98,76,76,98,98,76,76,98,76,,,,,,,',
',,,,,,,,,76,76,,,,,,76,,76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76',
',,76,76,,,,,,,76,,,,,,76,,,,76,76,,76,76,,,,76,76,76,76,76,469,469,76',
'76,469,469,76,469,,,,,,,,,,,,,,,,,469,469,,,,,,469,,469,,469,469,,469',
'469,469,,469,469,,,,,469,469,,,469,,,469,469,,,,,,,469,,,,,,469,,,,469',
'469,,469,469,,,,469,469,469,469,469,72,72,469,469,72,72,469,72,72,,',
',,,,,,,,,,,,,72,72,,,,,,72,,72,,72,72,,72,72,72,,72,72,72,72,,,72,72',
',,72,,,72,72,,,,,,,72,,,,,,72,,,,72,72,,72,72,,,,72,72,72,72,72,72,72',
'72,72,49,49,72,,49,49,,49,,,,,,,,,,,,,,,,,49,49,49,,,,,49,,49,,49,49',
',49,49,49,,49,49,49,49,,,49,49,,,49,,,49,49,,,,,,,49,,,,,,49,,,,49,49',
',49,49,,,,49,49,49,49,49,49,49,49,49,71,71,49,,71,71,71,71,,,,,,,,,',
',,,,,,,71,71,,,,,,71,,71,,71,71,,71,71,71,,71,71,71,71,,,71,71,,,71',
',,71,71,,,,,,,71,,,,,,71,,,,71,71,,71,71,,,,71,71,71,71,71,71,71,71',
'71,474,474,71,,474,474,,474,,,,,,,,,,,,,,,,,474,474,,,,,,474,,474,,474',
'474,,474,474,474,,474,474,,,,,474,474,,,474,,,474,474,,,,,,,474,,,,',
',474,,,,474,474,,474,474,,,,474,474,474,474,474,,,474,474,70,70,474',
',70,70,70,70,,,,,,,,,,,,,,,,,70,70,,,,,,70,,70,,70,70,,70,70,70,,70',
'70,70,70,,,70,70,,,70,,,70,70,,,,,,,70,,,,,,70,,,,70,70,,70,70,,,,70',
'70,70,70,70,70,70,70,70,263,263,70,,263,263,,263,,,,,,,,,,,,,,,,,263',
'263,,,,,,263,,263,,263,263,,263,263,263,,263,263,,,,,263,263,,,263,',
',263,263,,,,,,,263,,,,,,263,,,,263,263,,263,263,,,,263,263,263,263,263',
'222,222,263,263,222,222,263,222,,,,,,,,,,,,,,,,,222,222,,,,,,222,,222',
',222,222,,222,222,222,,222,222,,,,,222,222,,,222,,,222,222,,,,,,,222',
',,,,,222,,,,222,222,,222,222,,,,222,222,222,222,222,221,221,222,222',
'221,221,222,221,,,,,,,,,,,,,,,,,221,221,,,,,,221,,221,,221,221,,221',
'221,221,,221,221,,,,,221,221,,,221,,,221,221,,,,,,,221,,,,,,221,,,,221',
'221,,221,221,,,,221,221,221,221,221,220,220,221,221,220,220,221,220',
',,,,,,,,,,,,,,,,220,220,,,,,,220,,220,,220,220,,220,220,220,,220,220',
',,,,220,220,,,220,,,220,220,,,,,,,220,,,,,,220,,,,220,220,,220,220,',
',,220,220,220,220,220,484,484,220,220,484,484,220,484,484,,,,,,,,,,',
',,,,,484,484,,,,,,484,,484,,484,484,,484,484,484,,484,484,484,484,,',
'484,484,,,484,,,484,484,,,,,,,484,,,,,,484,,,,484,484,,484,484,,,,484',
'484,484,484,484,486,486,484,484,486,486,484,486,,,,,,,,,,,,,,,,,486',
'486,,,,,,486,,486,,486,486,,486,486,486,,486,486,486,486,,,486,486,',
',486,,,486,486,,,,,,,486,,,,,,486,,,,486,486,,486,486,,,,486,486,486',
'486,486,53,53,486,486,53,53,486,53,,,,,,,,,,,,,,,,,53,53,,,,,,53,,53',
',53,53,,53,53,53,,53,53,,,,,53,53,,,53,,,53,53,,,,,,,53,,,,,,53,,,,53',
'53,,53,53,,,,53,53,53,53,53,215,215,53,53,215,215,53,215,,,215,,,,,',
',,,,,,,,215,215,,,,,,215,,215,,215,215,,215,215,215,,215,215,,,,,215',
'215,,,215,,,215,215,,,,,,,215,,,,,,215,,,,215,215,,215,215,,,,215,215',
'215,215,215,54,54,215,215,54,54,215,54,,,,,,,,,,,,,,,,,54,54,,,,,,54',
',54,,54,54,,54,54,54,,54,54,,,,,54,54,,,54,,,54,54,,,,,,,54,,,,,,54',
',,,54,54,,54,54,,,,54,54,54,54,54,158,158,54,54,158,158,54,158,158,',
',,,,,,,,,,,,,,158,158,,,,,,158,,158,,158,158,,158,158,158,,158,158,158',
'158,,,158,158,,,158,,,158,158,,,,,,,158,,,,,,158,,,,158,158,,158,158',
',,,158,158,158,158,158,4,4,158,158,4,4,158,4,,,,,,,,,,,,,,,,,4,4,,,',
',,4,,4,,4,4,,4,4,4,4,4,4,4,4,,,4,4,,,4,,,4,4,,,,,,,4,,,,,,4,,,,4,4,',
'4,4,,,,4,4,4,4,4,160,160,4,4,160,160,4,160,,,,,,,,,,,,,,,,,160,160,160',
',,,,160,,160,,160,160,,160,160,160,,160,160,160,160,,,160,160,,,160',
',,160,160,,,,,,,160,,,,,,160,,,,160,160,,160,160,,,,160,160,160,160',
'160,160,160,160,160,202,202,160,,202,202,,202,202,,,,,,,,,,,,,,,,202',
'202,,,,,,202,,202,,202,202,,202,202,202,,202,202,202,202,,,202,202,',
',202,,,202,202,,,,,,,202,,,,,,202,,,,202,202,,202,202,,,,202,202,202',
'202,202,202,202,202,202,507,507,202,,507,507,,507,507,,,,,,,,,,,,,,',
',507,507,,,,,,507,,507,,507,507,,507,507,507,,507,507,507,507,246,,507',
'507,,,507,,,507,507,,,,246,,246,507,,,246,,,507,,,,507,507,,507,507',
',,,507,507,507,507,507,,246,507,507,,,507,,,,,246,246,409,,,246,246',
',,,,,246,,409,409,409,,409,,409,,409,,409,409,409,409,,,,,,,,,,,246',
',,,,409,,,,409,409,,,409,409,409,409,409,409,437,409,409,,,,,,409,,',
',437,437,437,,437,,437,,437,,437,437,437,437,,,,,,,,,409,,,,,,,437,',
',,437,437,,,437,437,437,437,437,437,438,437,437,,,,,,437,,,,438,438',
'438,,438,,438,,438,,438,438,438,438,,,,,,,,,437,,,,,,,438,,,,438,438',
',,438,438,438,438,438,438,439,438,438,,,,,,438,,,,439,439,439,,439,',
'439,,439,,439,439,439,439,,,,,,,,,438,,,,,,,439,,,,439,439,,,439,439',
'439,439,439,439,440,439,439,,,,,,439,,,,440,440,440,,440,,440,,440,',
'440,440,440,440,,,,,,,,,439,,,,,,,440,,,,440,440,,,440,440,440,440,440',
'440,466,440,440,,,,,,440,,,,466,466,466,,466,,466,,466,,466,466,466',
'466,,,,,,,,,440,,,,,,,466,,,,466,466,,,466,466,466,466,466,466,508,466',
'466,,,,,,466,,,,508,508,508,,508,,508,,508,,508,508,508,508,,,,,,,,',
'466,,,,,,,508,,,,508,508,,,508,508,508,508,508,508,,508,508,161,,161',
',,508,,,,,,,161,161,161,,161,,161,,161,,161,161,161,161,,,,,,508,,,',
',,,,,,161,,,,161,161,,,161,161,161,161,161,161,,161,161,163,,163,,,161',
',,,,,,163,163,163,,163,,163,,163,,163,163,163,163,,,,,,161,,,,,,,,,',
'163,,,,163,163,,,163,163,163,163,163,163,,163,163,164,,164,,,163,,,',
',,,164,164,164,,164,,164,,164,,164,164,164,164,,,,,,163,,,,,,,,,,164',
',,,164,164,,,164,164,164,164,164,164,201,164,164,,,,,,164,,,,201,201',
'201,,201,,201,,201,,201,201,201,201,,,,,,,,,164,,,,,,,201,,,245,201',
'201,,,201,201,201,201,201,201,,201,201,245,,245,,,201,245,,,,213,,,',
',,201,201,,,,,213,213,213,213,213,245,213,,213,201,213,213,213,213,',
'245,245,,,,245,245,,,,,,245,,213,,,,213,213,,,213,213,213,213,213,213',
'9,213,213,,,,,,213,,245,,9,9,9,,9,250,9,,9,,9,9,9,9,,,,,,250,,250,213',
',,250,,,,9,,,,9,9,,,9,9,9,9,9,9,,9,9,250,,,251,,9,,,250,250,250,250',
',,,250,250,251,,251,252,,250,251,,,,,,,,9,,,252,,252,,,,252,,,,251,',
',,250,,,,251,251,251,251,,,,251,251,252,,,253,,251,,,252,252,252,252',
'252,252,,252,252,253,,253,254,,252,253,,,,,,,,251,,254,254,,254,,,,254',
',254,,253,,,,252,,,,253,253,253,253,253,253,,253,253,254,,,,255,253',
',,254,254,254,254,254,254,,254,254,255,255,,255,256,254,,255,,255,,',
',,253,,,256,256,,256,,,,256,,256,,255,,,254,,,,,255,255,255,255,255',
'255,,255,255,256,,,,257,255,,,256,256,256,256,256,256,,256,256,257,257',
',257,,256,,257,,257,,,,,255,,,,,,,,,,,,,,257,,,256,,258,,,257,257,257',
'257,257,257,,257,257,258,258,258,,258,257,258,,258,,258,258,258,258',
',,,,,,,,,,,,,,,258,,257,,,259,,,258,258,258,258,258,258,,258,258,259',
'259,259,,259,258,259,,259,,259,259,259,259,,,,,,,,,,,,,,,,259,,258,',
',259,,,259,259,259,259,259,259,260,259,259,,,260,,,259,,,,260,260,260',
',260,,260,,260,,260,260,260,260,,,,,,,,,259,,,,,,,260,,,,260,260,,,260',
'260,260,260,260,260,,260,260,264,264,,,,260,264,,,,,,264,264,264,,264',
',264,,264,,264,264,264,264,,,,,,260,,,,,,,,,,264,,,,264,264,,,264,264',
'264,264,264,264,271,264,264,,,,,,264,,,,271,271,271,,271,,271,,271,',
'271,271,271,271,,,,,,,,,264,,,,,,,271,,,,271,271,,,271,271,271,271,271',
'271,276,271,271,,,,,,271,,,,276,276,276,276,276,,276,,276,,276,276,276',
'276,,,,,,,,,271,,,,,,,276,,,,276,276,,,276,276,276,276,276,276,,276',
'276,,270,270,270,270,276,270,270,270,,270,,270,270,,,,,,,270,270,270',
',,,270,,,,,276,,,,,,,270,270,,,,,,,,,,,,270,270,270,270,270,270,270',
'270,415,415,415,415,,415,415,415,,415,,415,415,,,,,,,415,415,415,,,',
'415,,,,,,,,,,,,415,415,,,,,,,,,,,,415,415,415,415,415,415,415,415,347',
'347,347,347,,347,347,347,,347,,347,347,,,,,,,347,347,347,,,,347,,,,',
',,,,,,,347,347,,,,,,,,,,,,347,347,347,347,347,347,347,347,349,349,349',
'349,,349,349,349,,349,,349,349,,,,,,,349,349,349,,,,349,,,,,,,,,,,,349',
'349,,,,,,,,,,,,349,349,349,349,349,349,349,349,379,379,379,379,,379',
'379,379,,379,,379,379,,,,,,,379,379,379,,,,379,,,,,,,,,,,,379,379,,',
',,,,,,,,,379,379,379,379,379,379,379,379,387,387,387,387,,387,387,387',
',387,,387,387,,,,,,,387,387,387,,,,387,,,,,,,,,,,,387,387,,,,,,,,,,',
',387,387,387,387,387,387,387,387' ]
        racc_action_check = arr = ::Array.new(10167, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   862,    13,   nil,   nil,  8150,    44,   nil,    84,   118,  9192,
  6058,  5972,   414,   nil,   nil,   nil,   192,  3626,  4572,  4744,
  6144,  6406,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   167,  6930,
    93,    -7,   110,  7806,  7978,   690,   290,   327,   224,    12,
   149,   661,   328,   275,   310,   182,   148,   nil,   nil,   nil,
  7200,  7020,  6840,   nil,   nil,   nil,  6668,   nil,   108,   125,
   nil,  5710,   nil,   199,  4658,   190,  4400,  4056,  3712,  3364,
  2414,  2242,  1206,  1034,  5268,  3970,  5182,  5358,  6582,   346,
   432,   948,  1120,  1636,  1722,  1898,  1984,  2070,  2328,  2500,
  2586,  2758,  2930,  3016,  3188,   nil,   -26,   204,  3798,  3884,
   208,   224,  4920,   295,   nil,   nil,   nil,   nil,   nil,   nil,
   235,   nil,   nil,   267,   234,   525,   439,   210,   216,   236,
   nil,   nil,   262,   206,    82,   204,   273,    28,   277,   nil,
   nil,   nil,   nil,   292,   nil,    97,   nil,   276,  8064,   107,
  8236,  8898,   nil,  8956,  9014,   120,   330,   241,   315,   776,
   345,   nil,   340,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   341,     3,   358,   nil,   nil,   363,   nil,   376,   nil,
    13,   nil,   nil,   nil,   nil,   304,   nil,   nil,    93,   518,
   -31,  9069,  8326,   nil,   382,   nil,   nil,   nil,   nil,   393,
   399,   401,   403,  9137,   400,  7892,     5,   111,    -9,   155,
  7548,  7462,  7376,   nil,   nil,   101,    65,    66,     9,   405,
   403,   184,    93,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   353,    91,   181,  9113,  8457,  4918,  3624,  1896,
  9209,  9253,  9270,  9314,  9331,  9376,  9393,  9438,  9484,  9530,
  9585,   nil,   nil,  7290,  9643,   405,   nil,   nil,   nil,   nil,
  9786,  9698,   370,   nil,   402,   384,  9753,   nil,   389,   nil,
   357,   443,   433,   nil,   nil,  5796,   415,   nil,  5534,  5092,
  5006,   394,   438,   399,   nil,   440,   nil,   nil,   438,   nil,
   nil,   nil,   nil,   nil,   437,   417,    96,   nil,     9,   nil,
  3278,  2844,  2672,   446,   448,   452,   454,   465,   nil,   442,
   575,   -14,   423,   185,   nil,   nil,   477,  5444,   480,   nil,
    84,   nil,   nil,   nil,   nil,   260,   nil,   nil,   nil,   nil,
   478,   nil,   nil,   nil,   nil,   480,   484,  9902,   485,  9960,
  1292,  1378,  1464,  1550,   483,   nil,   490,  1808,   486,   nil,
   488,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   492,  2156, 10018,
   495,   nil,   185,   nil,   492,   nil,   493, 10076,   nil,   437,
   nil,   132,   502,   504,   nil,  3102,   507,   nil,   456,   266,
  3450,   nil,   nil,  3536,   nil,   519,   159,   520,   497,  8510,
     7,  4142,   nil,  4228,  4314,  9844,  4486,   nil,   524,   nil,
   317,   nil,   nil,   525,   nil,  4830,   nil,   nil,   nil,   nil,
   nil,   nil,   463,   245,   523,   nil,   nil,  8565,  8620,  8675,
  8730,   527,  5624,   nil,   nil,   528,   nil,   nil,   526,  5886,
   nil,   nil,   nil,   512,   513,   529,   nil,  6230,   nil,   nil,
  6320,   533,   nil,  6492,   nil,   nil,  8785,   162,   nil,  6754,
   538,   515,   nil,   541,  7110,   545,   nil,   nil,   547,   nil,
   nil,   551,   553,   557,  7634,   nil,  7720,   557,   nil,   nil,
   561,   531,   nil,   nil,   nil,   nil,   569,   nil,   nil,   570,
   572,   nil,   176,   nil,   nil,    -2,   nil,  8416,  8840,   174,
   nil,   nil,   574,   nil,   575,   nil,   576,   579,   nil,   604,
   nil,   nil,   nil,   nil,   578,   nil,   580,   nil,   581,   nil,
   nil,   nil,   nil,   nil,   nil,   -34,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -300,    -1,    -2,    -4,    -5,    -8,   -10,   -18,   -23,
  -300,  -300,  -192,   -35,   -36,   -37,   -38,  -300,  -300,  -300,
  -300,  -300,   -70,   -71,   -72,   -73,   -74,   -75,   -76,   -77,
   -78,   -79,   -80,   -81,   -82,   -83,   -84,   -85,   -86,   -87,
   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,  -300,
  -300,  -103,  -107,  -300,  -300,  -300,  -300,  -300,  -300,  -300,
  -300,  -300,  -300,  -248,  -271,  -247,  -300,  -219,  -220,  -221,
  -300,  -300,  -300,  -244,  -245,  -246,  -300,  -250,  -300,  -263,
  -266,  -300,  -272,  -300,  -300,    -7,  -300,  -300,  -300,  -300,
  -300,  -300,  -300,  -300,  -146,  -300,  -300,  -300,  -300,  -300,
  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,
  -300,  -300,  -300,  -300,  -300,  -101,  -300,  -141,  -299,  -299,
   -24,   -25,  -300,  -299,  -162,  -189,  -190,  -191,  -192,  -193,
  -300,  -158,  -159,   -49,  -192,   -50,   -57,  -300,  -300,   -14,
   -15,   -16,  -273,   -98,  -238,  -240,  -243,  -239,  -300,  -235,
  -241,  -242,  -102,  -209,  -216,  -271,  -104,  -299,  -300,  -300,
  -300,  -300,  -117,  -300,  -300,  -299,  -299,  -300,  -299,  -300,
  -273,  -173,  -175,  -176,  -177,  -178,  -179,  -181,  -182,  -247,
  -248,  -299,  -300,  -273,  -223,  -232,  -233,  -236,  -273,  -225,
  -300,  -228,  -229,  -234,  -249,  -300,  -254,  -257,  -300,  -261,
  -300,  -300,  -300,   540,    -6,    -9,   -11,   -12,   -13,   -19,
   -20,   -21,   -22,  -300,  -273,  -300,   -94,   -95,   -96,  -291,
  -284,  -290,  -278,  -147,  -150,  -300,  -281,  -295,  -192,  -298,
  -287,  -293,  -220,  -221,  -277,  -282,  -283,  -285,  -286,  -288,
  -296,  -297,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,
   -47,   -48,   -51,   -52,   -53,   -54,   -55,   -56,   -58,   -59,
  -300,   -60,  -135,  -300,   -23,  -273,   -64,   -67,  -108,  -109,
  -146,  -145,  -300,  -144,  -300,  -275,  -300,   -30,  -299,  -194,
  -300,  -300,  -300,   -61,   -62,  -274,  -300,  -100,  -300,  -300,
  -261,  -300,  -300,  -300,  -188,  -300,  -112,  -115,  -273,  -199,
  -201,  -202,  -203,  -204,  -206,  -300,  -300,  -271,  -300,  -106,
  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -170,  -299,
  -274,  -300,  -299,  -213,  -214,  -215,  -300,  -274,  -300,  -226,
  -300,  -251,  -252,  -253,  -255,  -300,  -258,  -259,  -260,  -262,
  -273,  -264,  -267,  -269,  -270,    -8,  -300,  -146,  -300,  -274,
  -300,  -300,  -300,  -300,  -273,  -137,  -300,  -274,  -273,  -149,
  -300,  -278,  -279,  -280,  -281,  -284,  -287,  -289,  -290,  -291,
  -292,  -293,  -294,  -295,  -298,  -142,  -143,  -300,  -276,  -146,
  -300,  -165,  -300,  -195,  -273,  -196,  -273,  -146,   -17,   -97,
  -231,  -300,  -300,  -300,  -110,  -300,  -186,  -111,  -300,  -274,
  -300,  -207,  -208,  -300,  -105,  -300,  -120,  -300,  -126,   -68,
  -300,  -300,  -130,  -299,  -299,  -146,  -299,  -169,  -300,  -183,
  -300,  -174,  -180,  -300,  -211,  -300,  -222,  -237,  -224,  -227,
  -230,  -256,  -300,  -300,  -273,   -28,  -148,  -153,  -151,  -152,
  -139,  -300,  -274,   -63,   -65,  -300,   -27,   -31,  -273,  -299,
  -166,  -167,  -168,  -300,  -300,  -273,   -99,  -300,  -210,  -217,
  -261,  -300,  -114,  -300,  -116,  -200,  -205,  -120,  -119,  -300,
  -300,  -126,  -125,  -300,  -300,  -300,  -129,  -131,  -300,  -163,
  -164,  -300,  -273,  -300,  -300,  -184,  -299,  -273,  -265,  -268,
  -300,   -32,  -136,  -138,  -140,   -29,  -300,  -197,  -198,  -300,
  -300,  -113,  -300,  -118,  -121,  -300,  -124,  -300,   -69,  -299,
  -154,  -155,  -300,  -160,  -300,  -172,  -300,  -300,   -26,   -33,
  -161,  -157,  -218,  -187,  -300,  -123,  -300,  -128,  -300,  -133,
  -134,  -156,  -171,  -185,  -212,  -275,  -122,  -127,  -132,   -34 ]

racc_goto_table = [
     2,   275,   133,   135,   136,   265,   192,   137,   138,   175,
   273,   273,   173,   141,   156,   154,   153,   124,   262,   377,
   338,   186,   186,   194,   342,   292,   324,   214,   444,   142,
   421,   336,   412,   120,   121,   130,   139,    85,   161,   163,
   164,   468,   183,   188,     3,   472,   272,   274,   267,   294,
   490,   447,   261,   325,   394,   504,   411,   139,   139,   193,
   528,   165,   166,   196,   124,   354,   201,   181,   436,   478,
   481,   298,   483,   205,   206,   207,   208,   167,   168,   213,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,   264,
   380,   193,   503,   271,   271,   496,   287,   276,   506,   154,
   153,   392,   340,   209,   210,   211,   212,   204,   450,   278,
   418,   422,   465,   402,   141,   153,   401,   390,   444,   427,
   485,   477,     1,   337,   334,   282,   192,   335,   333,   124,
   308,   197,   516,   199,   nil,   nil,   nil,   139,   323,   nil,
   166,   nil,   181,   nil,   nil,   nil,   nil,   nil,   295,   nil,
   nil,   313,   314,   286,   316,   nil,   153,   424,   355,   317,
   381,   nil,   315,   nil,   nil,   nil,   nil,   322,   175,   nil,
   391,   173,   nil,   nil,   154,   153,   nil,   nil,   nil,   345,
   423,   319,   384,   386,   nil,   nil,   nil,   nil,   nil,   339,
   135,   nil,   346,   358,   326,   161,   163,   164,   nil,   328,
   nil,   419,   nil,   nil,   294,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   267,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   165,   166,   124,   nil,   348,   181,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   153,   153,   260,   388,
   nil,   nil,   nil,   nil,   nil,   nil,   489,   nil,   nil,   396,
   nil,   nil,   nil,   nil,   430,   nil,   nil,   nil,   175,   nil,
   nil,   173,   139,   nil,   264,   193,   193,   nil,   186,   539,
   434,   500,   431,   nil,   nil,   nil,   356,   nil,   nil,   nil,
   339,   267,   nil,   nil,   nil,   nil,   nil,   409,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   480,   480,   nil,   480,   nil,
   405,   407,   448,   nil,   139,   nil,   487,   193,   nil,   398,
   455,   nil,   196,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   437,   438,   439,   440,   nil,
   nil,   480,   264,   nil,   193,   nil,   nil,   493,   482,   nil,
   nil,   nil,   456,   nil,   502,   nil,   nil,   nil,   nil,   267,
   nil,   432,   nil,   276,   nil,   153,   nil,   388,   175,   nil,
   nil,   173,   nil,   nil,   nil,   441,   nil,   nil,   480,   445,
   nil,   nil,   nil,   nil,   nil,   466,   nil,   451,   nil,   nil,
   139,   267,   nil,   nil,   nil,   461,   409,   267,   535,   nil,
   nil,   529,   nil,   nil,   nil,   453,   nil,   454,   nil,   nil,
   264,   nil,   193,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   260,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   264,   nil,   193,   nil,   nil,   nil,   264,   nil,
   193,   nil,   nil,   nil,   161,   491,   nil,   nil,   nil,   508,
   339,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   495,
   nil,   nil,   nil,   nil,   nil,   nil,   499,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   514,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   512,   276,   524,   nil,   526,   517,   530 ]

racc_goto_check = [
     2,    15,    12,    12,    12,    24,     9,     6,     6,    46,
    63,    63,    47,     8,    50,    88,    48,    71,    64,    16,
    90,    95,    95,   100,   107,    54,    45,    13,    25,    10,
    80,    96,    61,    11,    11,    74,     6,     5,    12,    12,
    12,    58,    91,    91,     3,    59,    67,    67,     9,    63,
    14,    18,    23,    44,    55,    57,    60,     6,     6,     6,
    62,    71,    71,     6,    71,    65,    12,    71,    68,    73,
    73,    56,    73,     6,     6,     6,     6,    74,    75,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    76,     6,    58,    12,    12,    73,    50,    12,    59,    88,
    48,    90,    56,    11,    11,    11,    11,     5,    77,    72,
    79,    82,    83,    84,     8,    48,    86,    93,    25,    94,
    80,    61,     1,    97,   101,    71,     9,   102,   104,    71,
    10,   105,    73,   106,   nil,   nil,   nil,     6,    48,   nil,
    71,   nil,    71,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,    72,    72,    17,    72,   nil,    48,    45,    64,     2,
    63,   nil,    71,   nil,   nil,   nil,   nil,    72,    46,   nil,
    24,    47,   nil,   nil,    88,    48,   nil,   nil,   nil,     6,
    54,    17,    56,    56,   nil,   nil,   nil,   nil,   nil,     2,
    12,   nil,     2,    13,    17,    12,    12,    12,   nil,    17,
   nil,    63,   nil,   nil,    63,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    71,    71,    71,   nil,    17,    71,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    48,    48,    12,     8,
   nil,   nil,   nil,   nil,   nil,   nil,   107,   nil,   nil,    48,
   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,    46,   nil,
   nil,    47,     6,   nil,    12,     6,     6,   nil,    95,    16,
    13,    90,   100,   nil,   nil,   nil,    17,   nil,   nil,   nil,
     2,     9,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    63,    63,   nil,    63,   nil,
     2,     2,    13,   nil,     6,   nil,    24,     6,   nil,    17,
    13,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    12,    12,    12,   nil,
   nil,    63,    12,   nil,     6,   nil,   nil,    64,    13,   nil,
   nil,   nil,    50,   nil,    24,   nil,   nil,   nil,   nil,     9,
   nil,    17,   nil,    12,   nil,    48,   nil,     8,    46,   nil,
   nil,    47,   nil,   nil,   nil,    17,   nil,   nil,    63,    17,
   nil,   nil,   nil,   nil,   nil,    12,   nil,    71,   nil,   nil,
     6,     9,   nil,   nil,   nil,     2,    12,     9,    15,   nil,
   nil,    63,   nil,   nil,   nil,    17,   nil,    17,   nil,   nil,
    12,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12,   nil,     6,   nil,   nil,   nil,    12,   nil,
     6,   nil,   nil,   nil,    12,    17,   nil,   nil,   nil,    12,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,
   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    17,    12,     2,   nil,     2,    17,     2 ]

racc_goto_pointer = [
   nil,   132,     0,    44,   nil,    33,   -13,   nil,   -36,   -66,
   -20,    23,   -15,   -67,  -384,  -121,  -256,    21,  -327,   nil,
   nil,   nil,   nil,   -61,  -109,  -329,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  -129,  -156,   -52,   -49,   -34,   nil,
   -37,   nil,   nil,   nil,  -132,  -238,   -88,  -414,  -365,  -363,
  -256,  -280,  -449,  -108,   -95,  -198,   nil,   -72,  -281,   nil,
   nil,     5,    -4,  -344,    19,    19,  -178,  -264,   nil,  -199,
  -290,   nil,  -200,  -277,  -183,   nil,  -179,   nil,   -35,   nil,
  -179,   -28,   nil,  -161,  -198,   -49,  -167,   -65,   nil,   nil,
   -53,   -61,   -58,   nil,   -57,    63,    64,  -177 ]

racc_goto_default = [
   nil,   nil,   479,   nil,     4,     5,     6,     7,   185,   140,
   nil,     8,     9,   nil,   nil,   nil,   nil,   nil,   277,    13,
    14,    15,    16,   nil,   nil,   266,   410,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    49,
   nil,    51,    52,   157,   nil,   nil,   nil,   162,   nil,   nil,
   nil,   nil,   nil,   279,   nil,   nil,   117,   nil,   223,   225,
   224,    58,   nil,   nil,   nil,   123,   nil,   nil,   170,   nil,
   171,   172,   176,   299,   300,   301,   302,   303,   306,    66,
   nil,   nil,   190,   148,   187,   149,    73,    74,    75,    76,
   nil,   nil,   nil,   195,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 98, :_reduce_1,
  1, 98, :_reduce_2,
  0, 98, :_reduce_3,
  1, 99, :_reduce_4,
  1, 101, :_reduce_5,
  3, 101, :_reduce_6,
  2, 101, :_reduce_7,
  1, 102, :_reduce_8,
  3, 102, :_reduce_9,
  1, 103, :_reduce_none,
  3, 103, :_reduce_11,
  3, 103, :_reduce_12,
  3, 103, :_reduce_13,
  1, 105, :_reduce_none,
  1, 105, :_reduce_15,
  1, 107, :_reduce_16,
  3, 107, :_reduce_17,
  1, 104, :_reduce_none,
  3, 104, :_reduce_19,
  3, 104, :_reduce_20,
  3, 104, :_reduce_21,
  3, 104, :_reduce_22,
  1, 108, :_reduce_none,
  2, 108, :_reduce_24,
  2, 108, :_reduce_25,
  7, 108, :_reduce_26,
  5, 108, :_reduce_27,
  5, 108, :_reduce_28,
  4, 115, :_reduce_29,
  1, 112, :_reduce_30,
  3, 112, :_reduce_31,
  1, 111, :_reduce_32,
  2, 111, :_reduce_33,
  4, 111, :_reduce_34,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  3, 109, :_reduce_39,
  3, 109, :_reduce_40,
  3, 109, :_reduce_41,
  3, 109, :_reduce_42,
  3, 109, :_reduce_43,
  3, 109, :_reduce_44,
  3, 109, :_reduce_45,
  3, 109, :_reduce_46,
  3, 109, :_reduce_47,
  3, 109, :_reduce_48,
  2, 109, :_reduce_49,
  2, 109, :_reduce_50,
  3, 109, :_reduce_51,
  3, 109, :_reduce_52,
  3, 109, :_reduce_53,
  3, 109, :_reduce_54,
  3, 109, :_reduce_55,
  3, 109, :_reduce_56,
  2, 109, :_reduce_57,
  3, 109, :_reduce_58,
  3, 109, :_reduce_59,
  3, 109, :_reduce_60,
  3, 109, :_reduce_61,
  3, 109, :_reduce_62,
  5, 119, :_reduce_63,
  1, 121, :_reduce_64,
  3, 121, :_reduce_65,
  1, 122, :_reduce_none,
  1, 122, :_reduce_67,
  1, 123, :_reduce_68,
  3, 123, :_reduce_69,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_92,
  1, 116, :_reduce_93,
  1, 116, :_reduce_94,
  1, 116, :_reduce_95,
  1, 116, :_reduce_96,
  4, 118, :_reduce_97,
  2, 118, :_reduce_98,
  5, 118, :_reduce_99,
  3, 118, :_reduce_100,
  2, 146, :_reduce_101,
  2, 146, :_reduce_102,
  1, 125, :_reduce_103,
  2, 125, :_reduce_104,
  4, 148, :_reduce_105,
  3, 148, :_reduce_106,
  1, 148, :_reduce_107,
  3, 149, :_reduce_108,
  3, 149, :_reduce_109,
  3, 147, :_reduce_110,
  3, 147, :_reduce_111,
  2, 147, :_reduce_112,
  3, 152, :_reduce_113,
  2, 152, :_reduce_114,
  2, 150, :_reduce_115,
  4, 150, :_reduce_116,
  2, 128, :_reduce_117,
  5, 154, :_reduce_118,
  4, 154, :_reduce_119,
  0, 155, :_reduce_none,
  2, 155, :_reduce_121,
  4, 155, :_reduce_122,
  3, 155, :_reduce_123,
  6, 129, :_reduce_124,
  5, 129, :_reduce_125,
  0, 156, :_reduce_none,
  4, 156, :_reduce_127,
  3, 156, :_reduce_128,
  5, 127, :_reduce_129,
  1, 157, :_reduce_130,
  2, 157, :_reduce_131,
  5, 158, :_reduce_132,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 120, :_reduce_none,
  4, 120, :_reduce_136,
  1, 162, :_reduce_137,
  3, 162, :_reduce_138,
  3, 161, :_reduce_139,
  6, 126, :_reduce_140,
  2, 126, :_reduce_141,
  3, 163, :_reduce_142,
  3, 163, :_reduce_143,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  0, 110, :_reduce_146,
  1, 110, :_reduce_147,
  3, 110, :_reduce_148,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  3, 165, :_reduce_151,
  3, 165, :_reduce_152,
  3, 165, :_reduce_153,
  6, 130, :_reduce_154,
  6, 131, :_reduce_155,
  7, 117, :_reduce_156,
  7, 117, :_reduce_157,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  6, 133, :_reduce_160,
  7, 132, :_reduce_161,
  1, 172, :_reduce_162,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 173, :_reduce_none,
  2, 173, :_reduce_166,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  4, 135, :_reduce_169,
  3, 135, :_reduce_170,
  7, 134, :_reduce_171,
  6, 134, :_reduce_172,
  1, 175, :_reduce_173,
  3, 175, :_reduce_174,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_177,
  1, 177, :_reduce_none,
  1, 178, :_reduce_179,
  3, 178, :_reduce_180,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 176, :_reduce_none,
  2, 176, :_reduce_184,
  7, 137, :_reduce_185,
  2, 151, :_reduce_186,
  5, 151, :_reduce_187,
  1, 151, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_192,
  1, 168, :_reduce_193,
  1, 169, :_reduce_194,
  2, 169, :_reduce_195,
  2, 169, :_reduce_196,
  4, 169, :_reduce_197,
  4, 169, :_reduce_198,
  1, 153, :_reduce_199,
  3, 153, :_reduce_200,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  3, 183, :_reduce_205,
  1, 183, :_reduce_206,
  2, 184, :_reduce_207,
  2, 182, :_reduce_208,
  1, 185, :_reduce_209,
  4, 185, :_reduce_210,
  4, 138, :_reduce_211,
  7, 138, :_reduce_212,
  3, 138, :_reduce_213,
  3, 138, :_reduce_214,
  3, 138, :_reduce_215,
  2, 186, :_reduce_216,
  5, 139, :_reduce_217,
  7, 139, :_reduce_218,
  1, 124, :_reduce_219,
  1, 140, :_reduce_220,
  1, 140, :_reduce_221,
  4, 141, :_reduce_222,
  2, 141, :_reduce_223,
  4, 141, :_reduce_224,
  2, 141, :_reduce_225,
  3, 142, :_reduce_226,
  4, 142, :_reduce_227,
  2, 142, :_reduce_228,
  1, 189, :_reduce_229,
  3, 189, :_reduce_230,
  3, 106, :_reduce_231,
  1, 191, :_reduce_none,
  1, 191, :_reduce_233,
  1, 190, :_reduce_none,
  1, 190, :_reduce_235,
  1, 188, :_reduce_236,
  3, 188, :_reduce_237,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 193, :_reduce_247,
  1, 193, :_reduce_248,
  2, 194, :_reduce_249,
  1, 196, :_reduce_250,
  1, 198, :_reduce_251,
  1, 199, :_reduce_252,
  2, 197, :_reduce_253,
  1, 200, :_reduce_254,
  1, 201, :_reduce_255,
  2, 201, :_reduce_256,
  2, 195, :_reduce_257,
  2, 202, :_reduce_258,
  2, 202, :_reduce_259,
  3, 100, :_reduce_260,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  0, 203, :_reduce_263,
  2, 203, :_reduce_264,
  4, 203, :_reduce_265,
  1, 136, :_reduce_266,
  3, 136, :_reduce_267,
  5, 136, :_reduce_268,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 145, :_reduce_271,
  1, 143, :_reduce_272,
  0, 114, :_reduce_none,
  1, 114, :_reduce_274,
  0, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  0, 160, :_reduce_299 ]

racc_reduce_n = 300

racc_shift_n = 540

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :CONSUMES => 89,
  :SITE => 90,
  :PLAN => 91,
  :LOW => 92,
  :HIGH => 93,
  :LISTSTART => 94,
  :SPLAT => 95,
  :MODULO => 96 }

racc_nt_base = 97

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "PLAN",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "argument",
  "hashpair",
  "arguments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "access_args",
  "access_arg",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "plan_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "opt_return_type",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "type_alias_lhs",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hash_entry",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_15(val, _values, result)
     result = Factory.HASH_UNFOLDED([val[0]]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_17(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_21(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_22(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_24(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'virtual')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 135)
  def _reduce_25(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'exported')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 146)
  def _reduce_26(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 153)
  def _reduce_27(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 162)
  def _reduce_28(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 184)
  def _reduce_29(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_30(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_31(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_32(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_33(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_34(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_39(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_40(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_41(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_42(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_43(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_44(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_45(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_46(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_47(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_48(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_49(val, _values, result)
     result = val[1].minus            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_50(val, _values, result)
     result = val[1].unfold           ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_51(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_52(val, _values, result)
     result = val[0].eq  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_53(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_54(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_55(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_56(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_57(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_58(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_59(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_60(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 227)
  def _reduce_61(val, _values, result)
     result = val[1].paren            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_62(val, _values, result)
     result = val[1].paren          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_63(val, _values, result)
     result = val[0].access(val[2]); loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_64(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_65(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'egrammar.ra', 239)
  def _reduce_67(val, _values, result)
     result = Factory.HASH_UNFOLDED([val[0]]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_68(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_69(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_92(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_93(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 276)
  def _reduce_94(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_95(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_96(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_97(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_98(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_99(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_100(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_101(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_102(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_104(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_105(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_106(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_107(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 322)
  def _reduce_108(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_109(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 334)
  def _reduce_110(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[2][:value], val[1])
      loc result, val[0][:start], val[2][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 338)
  def _reduce_111(val, _values, result)
          result = Factory.LAMBDA(nil, val[0], nil)
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 342)
  def _reduce_112(val, _values, result)
          result = Factory.LAMBDA(nil, nil, nil)
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 347)
  def _reduce_113(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 348)
  def _reduce_114(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 352)
  def _reduce_115(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_116(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 361)
  def _reduce_117(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 368)
  def _reduce_118(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(val[2], val[1], val[3]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 372)
  def _reduce_119(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'egrammar.ra', 380)
  def _reduce_121(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 384)
  def _reduce_122(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_123(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 394)
  def _reduce_124(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(val[3], val[2], val[4]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 398)
  def _reduce_125(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 408)
  def _reduce_127(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_128(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_129(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_131(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 430)
  def _reduce_132(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_136(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 451)
  def _reduce_137(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_138(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_139(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_140(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_141(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 476)
  def _reduce_142(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 477)
  def _reduce_143(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 486)
  def _reduce_146(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_147(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 488)
  def _reduce_148(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_151(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 507)
  def _reduce_152(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 511)
  def _reduce_153(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 520)
  def _reduce_154(val, _values, result)
          definition = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 532)
  def _reduce_155(val, _values, result)
        definition = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc(definition, val[0], val[5])
    result = add_definition(definition)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 539)
  def _reduce_156(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QREF(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_157(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 560)
  def _reduce_160(val, _values, result)
          # Remove this plan's name from the namestack as all nested plans have been parsed
      namepop
      definition = Factory.PLAN(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 573)
  def _reduce_161(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      definition = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_162(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_166(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_169(val, _values, result)
        definition = Factory.SITE(val[2])
    loc(definition, val[0], val[3])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_170(val, _values, result)
        definition = Factory.SITE(nil)
    loc(definition, val[0], val[2])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_171(val, _values, result)
          definition = Factory.NODE(val[1], val[3], val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_172(val, _values, result)
          definition = Factory.NODE(val[1], val[3], nil)
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_173(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_174(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 175 omitted

# reduce 176 omitted

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_177(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 178 omitted

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_179(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_180(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_184(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_185(val, _values, result)
          definition = Factory.FUNCTION(val[1][:value], val[2], val[5], val[3])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_186(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_187(val, _values, result)
     result = val[1].access(val[3]) ; loc result, val[1], val[4] 
    result
  end
.,.,

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_192(val, _values, result)
     error val[0], "'class' keyword not allowed at this location" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_193(val, _values, result)
     error val[0], "A quoted string is not valid as a name here" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_194(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_196(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_197(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_198(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_199(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_200(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_205(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_206(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_207(val, _values, result)
     result = val[1]; val[1].captures_rest 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_208(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_209(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_210(val, _values, result)
     result = val[0].access(val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 729)
  def _reduce_211(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], Factory.KEY_ENTRY(val[2], val[3]))
      loc(definition, val[0], val[3])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_212(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2].access(val[4]))
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 739)
  def _reduce_213(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 744)
  def _reduce_214(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 749)
  def _reduce_215(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[4])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 755)
  def _reduce_216(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 761)
  def _reduce_217(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], nil, val[3])
        loc(definition, val[0], val[4])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 766)
  def _reduce_218(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5])
        loc(definition, val[0], val[6])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 775)
  def _reduce_219(val, _values, result)
         fqn = Factory.fqn(val[0][:value])
     loc(fqn, val[0])
     fqn['offset'] += 1
     fqn['length'] -= 1
     result = fqn.var
     loc(result, val[0])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 786)
  def _reduce_220(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 787)
  def _reduce_221(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 793)
  def _reduce_222(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 794)
  def _reduce_223(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 795)
  def _reduce_224(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 796)
  def _reduce_225(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 799)
  def _reduce_226(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 800)
  def _reduce_227(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 801)
  def _reduce_228(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 804)
  def _reduce_229(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 805)
  def _reduce_230(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 808)
  def _reduce_231(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 232 omitted

module_eval(<<'.,.,', 'egrammar.ra', 812)
  def _reduce_233(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

# reduce 234 omitted

module_eval(<<'.,.,', 'egrammar.ra', 817)
  def _reduce_235(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 820)
  def _reduce_236(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 821)
  def _reduce_237(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

module_eval(<<'.,.,', 'egrammar.ra', 838)
  def _reduce_247(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 839)
  def _reduce_248(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 841)
  def _reduce_249(val, _values, result)
     result = Factory.STRING(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 842)
  def _reduce_250(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 843)
  def _reduce_251(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 844)
  def _reduce_252(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 845)
  def _reduce_253(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 846)
  def _reduce_254(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 849)
  def _reduce_255(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 850)
  def _reduce_256(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 853)
  def _reduce_257(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 856)
  def _reduce_258(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 857)
  def _reduce_259(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 860)
  def _reduce_260(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 261 omitted

# reduce 262 omitted

module_eval(<<'.,.,', 'egrammar.ra', 867)
  def _reduce_263(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 868)
  def _reduce_264(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 869)
  def _reduce_265(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 872)
  def _reduce_266(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 873)
  def _reduce_267(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 874)
  def _reduce_268(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(val[2], val[1], val[3])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 269 omitted

# reduce 270 omitted

module_eval(<<'.,.,', 'egrammar.ra', 880)
  def _reduce_271(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 883)
  def _reduce_272(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 273 omitted

module_eval(<<'.,.,', 'egrammar.ra', 889)
  def _reduce_274(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

module_eval(<<'.,.,', 'egrammar.ra', 920)
  def _reduce_299(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
